-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_initialize_padded_memory_16_10_0_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_we0 : OUT STD_LOGIC;
    input_0_d0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_1_ce0 : OUT STD_LOGIC;
    input_1_we0 : OUT STD_LOGIC;
    input_1_d0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_2_ce0 : OUT STD_LOGIC;
    input_2_we0 : OUT STD_LOGIC;
    input_2_d0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_3_ce0 : OUT STD_LOGIC;
    input_3_we0 : OUT STD_LOGIC;
    input_3_d0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_4_ce0 : OUT STD_LOGIC;
    input_4_we0 : OUT STD_LOGIC;
    input_4_d0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_5_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_5_ce0 : OUT STD_LOGIC;
    input_5_we0 : OUT STD_LOGIC;
    input_5_d0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_6_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_6_ce0 : OUT STD_LOGIC;
    input_6_we0 : OUT STD_LOGIC;
    input_6_d0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_7_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_7_ce0 : OUT STD_LOGIC;
    input_7_we0 : OUT STD_LOGIC;
    input_7_d0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_8_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_8_ce0 : OUT STD_LOGIC;
    input_8_we0 : OUT STD_LOGIC;
    input_8_d0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_9_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_9_ce0 : OUT STD_LOGIC;
    input_9_we0 : OUT STD_LOGIC;
    input_9_d0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_10_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_10_ce0 : OUT STD_LOGIC;
    input_10_we0 : OUT STD_LOGIC;
    input_10_d0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_11_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_11_ce0 : OUT STD_LOGIC;
    input_11_we0 : OUT STD_LOGIC;
    input_11_d0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_12_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_12_ce0 : OUT STD_LOGIC;
    input_12_we0 : OUT STD_LOGIC;
    input_12_d0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_13_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_13_ce0 : OUT STD_LOGIC;
    input_13_we0 : OUT STD_LOGIC;
    input_13_d0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_14_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_14_ce0 : OUT STD_LOGIC;
    input_14_we0 : OUT STD_LOGIC;
    input_14_d0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_15_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_15_ce0 : OUT STD_LOGIC;
    input_15_we0 : OUT STD_LOGIC;
    input_15_d0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
end;


architecture behav of dut_initialize_padded_memory_16_10_0_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv8_A0 : STD_LOGIC_VECTOR (7 downto 0) := "10100000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln40_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal zext_ln41_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_fu_96 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln41_fu_420_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_x_load : STD_LOGIC_VECTOR (3 downto 0);
    signal m_fu_100 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln40_1_fu_388_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_m_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_104 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_1_fu_356_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln40_fu_396_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln41_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln40_fu_368_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln40_fu_380_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dut_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component dut_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln40_fu_350_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_104 <= add_ln40_1_fu_356_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_104 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    m_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln40_fu_350_p2 = ap_const_lv1_0)) then 
                    m_fu_100 <= select_ln40_1_fu_388_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    m_fu_100 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    x_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln40_fu_350_p2 = ap_const_lv1_0)) then 
                    x_fu_96 <= add_ln41_fu_420_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_96 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln40_1_fu_356_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv8_1));
    add_ln40_fu_368_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_m_load) + unsigned(ap_const_lv5_1));
    add_ln41_fu_420_p2 <= std_logic_vector(unsigned(select_ln40_fu_380_p3) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln40_fu_350_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln40_fu_350_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, indvar_flatten_fu_104)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_104;
        end if; 
    end process;


    ap_sig_allocacmp_m_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, m_fu_100)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_m_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_m_load <= m_fu_100;
        end if; 
    end process;


    ap_sig_allocacmp_x_load_assign_proc : process(ap_CS_fsm_state1, x_fu_96, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_x_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_x_load <= x_fu_96;
        end if; 
    end process;

    icmp_ln40_fu_350_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv8_A0) else "0";
    icmp_ln41_fu_374_p2 <= "1" when (ap_sig_allocacmp_x_load = ap_const_lv4_A) else "0";
    input_0_address0 <= zext_ln41_fu_400_p1(4 - 1 downto 0);

    input_0_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_0_d0 <= ap_const_lv10_0;

    input_0_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln40_fu_350_p2, trunc_ln40_fu_396_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln40_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln40_fu_396_p1 = ap_const_lv4_0))) then 
            input_0_we0 <= ap_const_logic_1;
        else 
            input_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_10_address0 <= zext_ln41_fu_400_p1(4 - 1 downto 0);

    input_10_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_10_ce0 <= ap_const_logic_1;
        else 
            input_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_10_d0 <= ap_const_lv10_0;

    input_10_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln40_fu_350_p2, trunc_ln40_fu_396_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln40_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln40_fu_396_p1 = ap_const_lv4_A))) then 
            input_10_we0 <= ap_const_logic_1;
        else 
            input_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_11_address0 <= zext_ln41_fu_400_p1(4 - 1 downto 0);

    input_11_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_11_ce0 <= ap_const_logic_1;
        else 
            input_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_11_d0 <= ap_const_lv10_0;

    input_11_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln40_fu_350_p2, trunc_ln40_fu_396_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln40_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln40_fu_396_p1 = ap_const_lv4_B))) then 
            input_11_we0 <= ap_const_logic_1;
        else 
            input_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_12_address0 <= zext_ln41_fu_400_p1(4 - 1 downto 0);

    input_12_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_12_ce0 <= ap_const_logic_1;
        else 
            input_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_12_d0 <= ap_const_lv10_0;

    input_12_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln40_fu_350_p2, trunc_ln40_fu_396_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln40_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln40_fu_396_p1 = ap_const_lv4_C))) then 
            input_12_we0 <= ap_const_logic_1;
        else 
            input_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_13_address0 <= zext_ln41_fu_400_p1(4 - 1 downto 0);

    input_13_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_13_ce0 <= ap_const_logic_1;
        else 
            input_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_13_d0 <= ap_const_lv10_0;

    input_13_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln40_fu_350_p2, trunc_ln40_fu_396_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln40_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln40_fu_396_p1 = ap_const_lv4_D))) then 
            input_13_we0 <= ap_const_logic_1;
        else 
            input_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_14_address0 <= zext_ln41_fu_400_p1(4 - 1 downto 0);

    input_14_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_14_ce0 <= ap_const_logic_1;
        else 
            input_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_14_d0 <= ap_const_lv10_0;

    input_14_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln40_fu_350_p2, trunc_ln40_fu_396_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln40_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln40_fu_396_p1 = ap_const_lv4_E))) then 
            input_14_we0 <= ap_const_logic_1;
        else 
            input_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_15_address0 <= zext_ln41_fu_400_p1(4 - 1 downto 0);

    input_15_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_15_ce0 <= ap_const_logic_1;
        else 
            input_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_15_d0 <= ap_const_lv10_0;

    input_15_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln40_fu_350_p2, trunc_ln40_fu_396_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln40_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln40_fu_396_p1 = ap_const_lv4_F))) then 
            input_15_we0 <= ap_const_logic_1;
        else 
            input_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_1_address0 <= zext_ln41_fu_400_p1(4 - 1 downto 0);

    input_1_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_1_ce0 <= ap_const_logic_1;
        else 
            input_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_1_d0 <= ap_const_lv10_0;

    input_1_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln40_fu_350_p2, trunc_ln40_fu_396_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln40_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln40_fu_396_p1 = ap_const_lv4_1))) then 
            input_1_we0 <= ap_const_logic_1;
        else 
            input_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_2_address0 <= zext_ln41_fu_400_p1(4 - 1 downto 0);

    input_2_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_2_ce0 <= ap_const_logic_1;
        else 
            input_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_2_d0 <= ap_const_lv10_0;

    input_2_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln40_fu_350_p2, trunc_ln40_fu_396_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln40_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln40_fu_396_p1 = ap_const_lv4_2))) then 
            input_2_we0 <= ap_const_logic_1;
        else 
            input_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_3_address0 <= zext_ln41_fu_400_p1(4 - 1 downto 0);

    input_3_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_3_ce0 <= ap_const_logic_1;
        else 
            input_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_3_d0 <= ap_const_lv10_0;

    input_3_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln40_fu_350_p2, trunc_ln40_fu_396_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln40_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln40_fu_396_p1 = ap_const_lv4_3))) then 
            input_3_we0 <= ap_const_logic_1;
        else 
            input_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_4_address0 <= zext_ln41_fu_400_p1(4 - 1 downto 0);

    input_4_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_4_ce0 <= ap_const_logic_1;
        else 
            input_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_4_d0 <= ap_const_lv10_0;

    input_4_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln40_fu_350_p2, trunc_ln40_fu_396_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln40_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln40_fu_396_p1 = ap_const_lv4_4))) then 
            input_4_we0 <= ap_const_logic_1;
        else 
            input_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_5_address0 <= zext_ln41_fu_400_p1(4 - 1 downto 0);

    input_5_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_5_ce0 <= ap_const_logic_1;
        else 
            input_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_5_d0 <= ap_const_lv10_0;

    input_5_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln40_fu_350_p2, trunc_ln40_fu_396_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln40_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln40_fu_396_p1 = ap_const_lv4_5))) then 
            input_5_we0 <= ap_const_logic_1;
        else 
            input_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_6_address0 <= zext_ln41_fu_400_p1(4 - 1 downto 0);

    input_6_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_6_ce0 <= ap_const_logic_1;
        else 
            input_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_6_d0 <= ap_const_lv10_0;

    input_6_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln40_fu_350_p2, trunc_ln40_fu_396_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln40_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln40_fu_396_p1 = ap_const_lv4_6))) then 
            input_6_we0 <= ap_const_logic_1;
        else 
            input_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_7_address0 <= zext_ln41_fu_400_p1(4 - 1 downto 0);

    input_7_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_7_ce0 <= ap_const_logic_1;
        else 
            input_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_7_d0 <= ap_const_lv10_0;

    input_7_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln40_fu_350_p2, trunc_ln40_fu_396_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln40_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln40_fu_396_p1 = ap_const_lv4_7))) then 
            input_7_we0 <= ap_const_logic_1;
        else 
            input_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_8_address0 <= zext_ln41_fu_400_p1(4 - 1 downto 0);

    input_8_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_8_ce0 <= ap_const_logic_1;
        else 
            input_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_8_d0 <= ap_const_lv10_0;

    input_8_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln40_fu_350_p2, trunc_ln40_fu_396_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln40_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln40_fu_396_p1 = ap_const_lv4_8))) then 
            input_8_we0 <= ap_const_logic_1;
        else 
            input_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_9_address0 <= zext_ln41_fu_400_p1(4 - 1 downto 0);

    input_9_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_9_ce0 <= ap_const_logic_1;
        else 
            input_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_9_d0 <= ap_const_lv10_0;

    input_9_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln40_fu_350_p2, trunc_ln40_fu_396_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln40_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln40_fu_396_p1 = ap_const_lv4_9))) then 
            input_9_we0 <= ap_const_logic_1;
        else 
            input_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln40_1_fu_388_p3 <= 
        add_ln40_fu_368_p2 when (icmp_ln41_fu_374_p2(0) = '1') else 
        ap_sig_allocacmp_m_load;
    select_ln40_fu_380_p3 <= 
        ap_const_lv4_0 when (icmp_ln41_fu_374_p2(0) = '1') else 
        ap_sig_allocacmp_x_load;
    trunc_ln40_fu_396_p1 <= select_ln40_1_fu_388_p3(4 - 1 downto 0);
    zext_ln41_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln40_fu_380_p3),64));
end behav;
