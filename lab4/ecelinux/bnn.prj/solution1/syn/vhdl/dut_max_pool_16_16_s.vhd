-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_max_pool_16_16_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_0_0_ce0 : OUT STD_LOGIC;
    input_0_0_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_0_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_0_1_ce0 : OUT STD_LOGIC;
    input_0_1_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_1_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_1_0_ce0 : OUT STD_LOGIC;
    input_1_0_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_1_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_1_1_ce0 : OUT STD_LOGIC;
    input_1_1_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_2_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_2_0_ce0 : OUT STD_LOGIC;
    input_2_0_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_2_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_2_1_ce0 : OUT STD_LOGIC;
    input_2_1_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_3_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_3_0_ce0 : OUT STD_LOGIC;
    input_3_0_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_3_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_3_1_ce0 : OUT STD_LOGIC;
    input_3_1_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_4_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_4_0_ce0 : OUT STD_LOGIC;
    input_4_0_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_4_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_4_1_ce0 : OUT STD_LOGIC;
    input_4_1_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_5_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_5_0_ce0 : OUT STD_LOGIC;
    input_5_0_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_5_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_5_1_ce0 : OUT STD_LOGIC;
    input_5_1_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_6_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_6_0_ce0 : OUT STD_LOGIC;
    input_6_0_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_6_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_6_1_ce0 : OUT STD_LOGIC;
    input_6_1_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_7_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_7_0_ce0 : OUT STD_LOGIC;
    input_7_0_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_7_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_7_1_ce0 : OUT STD_LOGIC;
    input_7_1_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_8_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_8_0_ce0 : OUT STD_LOGIC;
    input_8_0_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_8_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_8_1_ce0 : OUT STD_LOGIC;
    input_8_1_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_9_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_9_0_ce0 : OUT STD_LOGIC;
    input_9_0_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_9_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_9_1_ce0 : OUT STD_LOGIC;
    input_9_1_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_10_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_10_0_ce0 : OUT STD_LOGIC;
    input_10_0_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_10_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_10_1_ce0 : OUT STD_LOGIC;
    input_10_1_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_11_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_11_0_ce0 : OUT STD_LOGIC;
    input_11_0_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_11_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_11_1_ce0 : OUT STD_LOGIC;
    input_11_1_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_12_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_12_0_ce0 : OUT STD_LOGIC;
    input_12_0_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_12_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_12_1_ce0 : OUT STD_LOGIC;
    input_12_1_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_13_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_13_0_ce0 : OUT STD_LOGIC;
    input_13_0_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_13_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_13_1_ce0 : OUT STD_LOGIC;
    input_13_1_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_14_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_14_0_ce0 : OUT STD_LOGIC;
    input_14_0_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_14_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_14_1_ce0 : OUT STD_LOGIC;
    input_14_1_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_15_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_15_0_ce0 : OUT STD_LOGIC;
    input_15_0_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_15_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_15_1_ce0 : OUT STD_LOGIC;
    input_15_1_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    output_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_0_ce0 : OUT STD_LOGIC;
    output_0_we0 : OUT STD_LOGIC;
    output_0_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_1_ce0 : OUT STD_LOGIC;
    output_1_we0 : OUT STD_LOGIC;
    output_1_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_2_ce0 : OUT STD_LOGIC;
    output_2_we0 : OUT STD_LOGIC;
    output_2_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_3_ce0 : OUT STD_LOGIC;
    output_3_we0 : OUT STD_LOGIC;
    output_3_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_4_ce0 : OUT STD_LOGIC;
    output_4_we0 : OUT STD_LOGIC;
    output_4_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_5_ce0 : OUT STD_LOGIC;
    output_5_we0 : OUT STD_LOGIC;
    output_5_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_6_ce0 : OUT STD_LOGIC;
    output_6_we0 : OUT STD_LOGIC;
    output_6_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_7_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_7_ce0 : OUT STD_LOGIC;
    output_7_we0 : OUT STD_LOGIC;
    output_7_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of dut_max_pool_16_16_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln130_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal zext_ln137_1_fu_740_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_1_reg_973 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal x_fu_122 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln131_fu_776_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_x_load : STD_LOGIC_VECTOR (3 downto 0);
    signal m_fu_126 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln130_1_fu_710_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_m_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_130 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln130_1_fu_678_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln131_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln130_fu_690_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln137_fu_718_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln130_fu_702_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_722_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln137_fu_730_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln137_fu_734_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln137_1_fu_803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln137_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln137_4_fu_822_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln137_3_fu_816_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln137_7_fu_841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln137_6_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln137_10_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln137_9_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln137_13_fu_879_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln137_12_fu_873_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln137_16_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln137_15_fu_892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln137_19_fu_917_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln137_18_fu_911_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln137_22_fu_936_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln137_21_fu_930_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dut_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component dut_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln130_fu_672_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_130 <= add_ln130_1_fu_678_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_130 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    m_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln130_fu_672_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    m_fu_126 <= select_ln130_1_fu_710_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    m_fu_126 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    x_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln130_fu_672_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    x_fu_122 <= add_ln131_fu_776_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_122 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln130_fu_672_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln137_1_reg_973(6 downto 0) <= zext_ln137_1_fu_740_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln137_1_reg_973(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln130_1_fu_678_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv8_1));
    add_ln130_fu_690_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_m_load) + unsigned(ap_const_lv5_1));
    add_ln131_fu_776_p2 <= std_logic_vector(unsigned(select_ln130_fu_702_p3) + unsigned(ap_const_lv4_1));
    add_ln137_fu_734_p2 <= std_logic_vector(unsigned(tmp_fu_722_p3) + unsigned(zext_ln137_fu_730_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln130_fu_672_p2)
    begin
        if (((icmp_ln130_fu_672_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_130)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_130;
        end if; 
    end process;


    ap_sig_allocacmp_m_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, m_fu_126)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_m_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_m_load <= m_fu_126;
        end if; 
    end process;


    ap_sig_allocacmp_x_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, x_fu_122, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_x_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_x_load <= x_fu_122;
        end if; 
    end process;

    icmp_ln130_fu_672_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv8_80) else "0";
    icmp_ln131_fu_696_p2 <= "1" when (ap_sig_allocacmp_x_load = ap_const_lv4_8) else "0";
    input_0_0_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_0_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_0_0_ce0 <= ap_const_logic_1;
        else 
            input_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_0_1_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_0_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_0_1_ce0 <= ap_const_logic_1;
        else 
            input_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_10_0_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_10_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_10_0_ce0 <= ap_const_logic_1;
        else 
            input_10_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_10_1_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_10_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_10_1_ce0 <= ap_const_logic_1;
        else 
            input_10_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_11_0_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_11_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_11_0_ce0 <= ap_const_logic_1;
        else 
            input_11_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_11_1_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_11_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_11_1_ce0 <= ap_const_logic_1;
        else 
            input_11_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_12_0_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_12_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_12_0_ce0 <= ap_const_logic_1;
        else 
            input_12_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_12_1_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_12_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_12_1_ce0 <= ap_const_logic_1;
        else 
            input_12_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_13_0_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_13_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_13_0_ce0 <= ap_const_logic_1;
        else 
            input_13_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_13_1_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_13_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_13_1_ce0 <= ap_const_logic_1;
        else 
            input_13_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_14_0_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_14_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_14_0_ce0 <= ap_const_logic_1;
        else 
            input_14_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_14_1_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_14_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_14_1_ce0 <= ap_const_logic_1;
        else 
            input_14_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_15_0_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_15_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_15_0_ce0 <= ap_const_logic_1;
        else 
            input_15_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_15_1_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_15_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_15_1_ce0 <= ap_const_logic_1;
        else 
            input_15_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_1_0_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_1_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_1_0_ce0 <= ap_const_logic_1;
        else 
            input_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_1_1_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_1_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_1_1_ce0 <= ap_const_logic_1;
        else 
            input_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_2_0_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_2_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_2_0_ce0 <= ap_const_logic_1;
        else 
            input_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_2_1_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_2_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_2_1_ce0 <= ap_const_logic_1;
        else 
            input_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_3_0_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_3_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_3_0_ce0 <= ap_const_logic_1;
        else 
            input_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_3_1_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_3_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_3_1_ce0 <= ap_const_logic_1;
        else 
            input_3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_4_0_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_4_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_4_0_ce0 <= ap_const_logic_1;
        else 
            input_4_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_4_1_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_4_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_4_1_ce0 <= ap_const_logic_1;
        else 
            input_4_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_5_0_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_5_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_5_0_ce0 <= ap_const_logic_1;
        else 
            input_5_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_5_1_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_5_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_5_1_ce0 <= ap_const_logic_1;
        else 
            input_5_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_6_0_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_6_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_6_0_ce0 <= ap_const_logic_1;
        else 
            input_6_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_6_1_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_6_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_6_1_ce0 <= ap_const_logic_1;
        else 
            input_6_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_7_0_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_7_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_7_0_ce0 <= ap_const_logic_1;
        else 
            input_7_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_7_1_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_7_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_7_1_ce0 <= ap_const_logic_1;
        else 
            input_7_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_8_0_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_8_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_8_0_ce0 <= ap_const_logic_1;
        else 
            input_8_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_8_1_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_8_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_8_1_ce0 <= ap_const_logic_1;
        else 
            input_8_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_9_0_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_9_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_9_0_ce0 <= ap_const_logic_1;
        else 
            input_9_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_9_1_address0 <= zext_ln137_1_fu_740_p1(7 - 1 downto 0);

    input_9_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_9_1_ce0 <= ap_const_logic_1;
        else 
            input_9_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln137_10_fu_860_p2 <= (input_7_1_q0 or input_6_1_q0);
    or_ln137_12_fu_873_p2 <= (input_9_0_q0 or input_8_0_q0);
    or_ln137_13_fu_879_p2 <= (input_9_1_q0 or input_8_1_q0);
    or_ln137_15_fu_892_p2 <= (input_11_0_q0 or input_10_0_q0);
    or_ln137_16_fu_898_p2 <= (input_11_1_q0 or input_10_1_q0);
    or_ln137_18_fu_911_p2 <= (input_13_0_q0 or input_12_0_q0);
    or_ln137_19_fu_917_p2 <= (input_13_1_q0 or input_12_1_q0);
    or_ln137_1_fu_803_p2 <= (input_1_1_q0 or input_0_1_q0);
    or_ln137_21_fu_930_p2 <= (input_15_0_q0 or input_14_0_q0);
    or_ln137_22_fu_936_p2 <= (input_15_1_q0 or input_14_1_q0);
    or_ln137_3_fu_816_p2 <= (input_3_0_q0 or input_2_0_q0);
    or_ln137_4_fu_822_p2 <= (input_3_1_q0 or input_2_1_q0);
    or_ln137_6_fu_835_p2 <= (input_5_0_q0 or input_4_0_q0);
    or_ln137_7_fu_841_p2 <= (input_5_1_q0 or input_4_1_q0);
    or_ln137_9_fu_854_p2 <= (input_7_0_q0 or input_6_0_q0);
    or_ln137_fu_797_p2 <= (input_1_0_q0 or input_0_0_q0);
    output_0_address0 <= zext_ln137_1_reg_973(7 - 1 downto 0);

    output_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_0_ce0 <= ap_const_logic_1;
        else 
            output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_d0 <= (or_ln137_fu_797_p2 or or_ln137_1_fu_803_p2);

    output_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_0_we0 <= ap_const_logic_1;
        else 
            output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_1_address0 <= zext_ln137_1_reg_973(7 - 1 downto 0);

    output_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_1_ce0 <= ap_const_logic_1;
        else 
            output_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_1_d0 <= (or_ln137_4_fu_822_p2 or or_ln137_3_fu_816_p2);

    output_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_1_we0 <= ap_const_logic_1;
        else 
            output_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_2_address0 <= zext_ln137_1_reg_973(7 - 1 downto 0);

    output_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_2_ce0 <= ap_const_logic_1;
        else 
            output_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_2_d0 <= (or_ln137_7_fu_841_p2 or or_ln137_6_fu_835_p2);

    output_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_2_we0 <= ap_const_logic_1;
        else 
            output_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_3_address0 <= zext_ln137_1_reg_973(7 - 1 downto 0);

    output_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_3_ce0 <= ap_const_logic_1;
        else 
            output_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_3_d0 <= (or_ln137_9_fu_854_p2 or or_ln137_10_fu_860_p2);

    output_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_3_we0 <= ap_const_logic_1;
        else 
            output_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_4_address0 <= zext_ln137_1_reg_973(7 - 1 downto 0);

    output_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_4_ce0 <= ap_const_logic_1;
        else 
            output_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_4_d0 <= (or_ln137_13_fu_879_p2 or or_ln137_12_fu_873_p2);

    output_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_4_we0 <= ap_const_logic_1;
        else 
            output_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_5_address0 <= zext_ln137_1_reg_973(7 - 1 downto 0);

    output_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_5_ce0 <= ap_const_logic_1;
        else 
            output_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_5_d0 <= (or_ln137_16_fu_898_p2 or or_ln137_15_fu_892_p2);

    output_5_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_5_we0 <= ap_const_logic_1;
        else 
            output_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_6_address0 <= zext_ln137_1_reg_973(7 - 1 downto 0);

    output_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_6_ce0 <= ap_const_logic_1;
        else 
            output_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_6_d0 <= (or_ln137_19_fu_917_p2 or or_ln137_18_fu_911_p2);

    output_6_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_6_we0 <= ap_const_logic_1;
        else 
            output_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_7_address0 <= zext_ln137_1_reg_973(7 - 1 downto 0);

    output_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_7_ce0 <= ap_const_logic_1;
        else 
            output_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_7_d0 <= (or_ln137_22_fu_936_p2 or or_ln137_21_fu_930_p2);

    output_7_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_7_we0 <= ap_const_logic_1;
        else 
            output_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln130_1_fu_710_p3 <= 
        add_ln130_fu_690_p2 when (icmp_ln131_fu_696_p2(0) = '1') else 
        ap_sig_allocacmp_m_load;
    select_ln130_fu_702_p3 <= 
        ap_const_lv4_0 when (icmp_ln131_fu_696_p2(0) = '1') else 
        ap_sig_allocacmp_x_load;
    tmp_fu_722_p3 <= (trunc_ln137_fu_718_p1 & ap_const_lv3_0);
    trunc_ln137_fu_718_p1 <= select_ln130_1_fu_710_p3(4 - 1 downto 0);
    zext_ln137_1_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln137_fu_734_p2),64));
    zext_ln137_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln130_fu_702_p3),7));
end behav;
