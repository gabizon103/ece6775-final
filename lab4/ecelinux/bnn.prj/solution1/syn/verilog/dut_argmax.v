// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_argmax (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] input_r_address0;
output   input_r_ce0;
input  [9:0] input_r_q0;
output  [3:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] input_r_address0;
reg input_r_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] max_V_reg_48;
wire    ap_CS_fsm_state2;
wire    grp_argmax_Pipeline_digit_loop_fu_26_ap_start;
wire    grp_argmax_Pipeline_digit_loop_fu_26_ap_done;
wire    grp_argmax_Pipeline_digit_loop_fu_26_ap_idle;
wire    grp_argmax_Pipeline_digit_loop_fu_26_ap_ready;
wire   [3:0] grp_argmax_Pipeline_digit_loop_fu_26_input_r_address0;
wire    grp_argmax_Pipeline_digit_loop_fu_26_input_r_ce0;
wire   [3:0] grp_argmax_Pipeline_digit_loop_fu_26_max_id_V_out;
wire    grp_argmax_Pipeline_digit_loop_fu_26_max_id_V_out_ap_vld;
reg    grp_argmax_Pipeline_digit_loop_fu_26_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_argmax_Pipeline_digit_loop_fu_26_ap_start_reg = 1'b0;
end

dut_argmax_Pipeline_digit_loop grp_argmax_Pipeline_digit_loop_fu_26(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_argmax_Pipeline_digit_loop_fu_26_ap_start),
    .ap_done(grp_argmax_Pipeline_digit_loop_fu_26_ap_done),
    .ap_idle(grp_argmax_Pipeline_digit_loop_fu_26_ap_idle),
    .ap_ready(grp_argmax_Pipeline_digit_loop_fu_26_ap_ready),
    .sext_ln187(max_V_reg_48),
    .input_r_address0(grp_argmax_Pipeline_digit_loop_fu_26_input_r_address0),
    .input_r_ce0(grp_argmax_Pipeline_digit_loop_fu_26_input_r_ce0),
    .input_r_q0(input_r_q0),
    .max_id_V_out(grp_argmax_Pipeline_digit_loop_fu_26_max_id_V_out),
    .max_id_V_out_ap_vld(grp_argmax_Pipeline_digit_loop_fu_26_max_id_V_out_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_argmax_Pipeline_digit_loop_fu_26_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_argmax_Pipeline_digit_loop_fu_26_ap_start_reg <= 1'b1;
        end else if ((grp_argmax_Pipeline_digit_loop_fu_26_ap_ready == 1'b1)) begin
            grp_argmax_Pipeline_digit_loop_fu_26_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        max_V_reg_48 <= input_r_q0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_argmax_Pipeline_digit_loop_fu_26_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        input_r_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_r_address0 = grp_argmax_Pipeline_digit_loop_fu_26_input_r_address0;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        input_r_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_r_ce0 = grp_argmax_Pipeline_digit_loop_fu_26_input_r_ce0;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_argmax_Pipeline_digit_loop_fu_26_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_return = grp_argmax_Pipeline_digit_loop_fu_26_max_id_V_out;

assign grp_argmax_Pipeline_digit_loop_fu_26_ap_start = grp_argmax_Pipeline_digit_loop_fu_26_ap_start_reg;

endmodule //dut_argmax
