// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_max_pool_16_16_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_0_address0,
        input_0_0_ce0,
        input_0_0_q0,
        input_0_1_address0,
        input_0_1_ce0,
        input_0_1_q0,
        input_1_0_address0,
        input_1_0_ce0,
        input_1_0_q0,
        input_1_1_address0,
        input_1_1_ce0,
        input_1_1_q0,
        input_2_0_address0,
        input_2_0_ce0,
        input_2_0_q0,
        input_2_1_address0,
        input_2_1_ce0,
        input_2_1_q0,
        input_3_0_address0,
        input_3_0_ce0,
        input_3_0_q0,
        input_3_1_address0,
        input_3_1_ce0,
        input_3_1_q0,
        input_4_0_address0,
        input_4_0_ce0,
        input_4_0_q0,
        input_4_1_address0,
        input_4_1_ce0,
        input_4_1_q0,
        input_5_0_address0,
        input_5_0_ce0,
        input_5_0_q0,
        input_5_1_address0,
        input_5_1_ce0,
        input_5_1_q0,
        input_6_0_address0,
        input_6_0_ce0,
        input_6_0_q0,
        input_6_1_address0,
        input_6_1_ce0,
        input_6_1_q0,
        input_7_0_address0,
        input_7_0_ce0,
        input_7_0_q0,
        input_7_1_address0,
        input_7_1_ce0,
        input_7_1_q0,
        input_8_0_address0,
        input_8_0_ce0,
        input_8_0_q0,
        input_8_1_address0,
        input_8_1_ce0,
        input_8_1_q0,
        input_9_0_address0,
        input_9_0_ce0,
        input_9_0_q0,
        input_9_1_address0,
        input_9_1_ce0,
        input_9_1_q0,
        input_10_0_address0,
        input_10_0_ce0,
        input_10_0_q0,
        input_10_1_address0,
        input_10_1_ce0,
        input_10_1_q0,
        input_11_0_address0,
        input_11_0_ce0,
        input_11_0_q0,
        input_11_1_address0,
        input_11_1_ce0,
        input_11_1_q0,
        input_12_0_address0,
        input_12_0_ce0,
        input_12_0_q0,
        input_12_1_address0,
        input_12_1_ce0,
        input_12_1_q0,
        input_13_0_address0,
        input_13_0_ce0,
        input_13_0_q0,
        input_13_1_address0,
        input_13_1_ce0,
        input_13_1_q0,
        input_14_0_address0,
        input_14_0_ce0,
        input_14_0_q0,
        input_14_1_address0,
        input_14_1_ce0,
        input_14_1_q0,
        input_15_0_address0,
        input_15_0_ce0,
        input_15_0_q0,
        input_15_1_address0,
        input_15_1_ce0,
        input_15_1_q0,
        output_0_address0,
        output_0_ce0,
        output_0_we0,
        output_0_d0,
        output_1_address0,
        output_1_ce0,
        output_1_we0,
        output_1_d0,
        output_2_address0,
        output_2_ce0,
        output_2_we0,
        output_2_d0,
        output_3_address0,
        output_3_ce0,
        output_3_we0,
        output_3_d0,
        output_4_address0,
        output_4_ce0,
        output_4_we0,
        output_4_d0,
        output_5_address0,
        output_5_ce0,
        output_5_we0,
        output_5_d0,
        output_6_address0,
        output_6_ce0,
        output_6_we0,
        output_6_d0,
        output_7_address0,
        output_7_ce0,
        output_7_we0,
        output_7_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] input_0_0_address0;
output   input_0_0_ce0;
input  [0:0] input_0_0_q0;
output  [6:0] input_0_1_address0;
output   input_0_1_ce0;
input  [0:0] input_0_1_q0;
output  [6:0] input_1_0_address0;
output   input_1_0_ce0;
input  [0:0] input_1_0_q0;
output  [6:0] input_1_1_address0;
output   input_1_1_ce0;
input  [0:0] input_1_1_q0;
output  [6:0] input_2_0_address0;
output   input_2_0_ce0;
input  [0:0] input_2_0_q0;
output  [6:0] input_2_1_address0;
output   input_2_1_ce0;
input  [0:0] input_2_1_q0;
output  [6:0] input_3_0_address0;
output   input_3_0_ce0;
input  [0:0] input_3_0_q0;
output  [6:0] input_3_1_address0;
output   input_3_1_ce0;
input  [0:0] input_3_1_q0;
output  [6:0] input_4_0_address0;
output   input_4_0_ce0;
input  [0:0] input_4_0_q0;
output  [6:0] input_4_1_address0;
output   input_4_1_ce0;
input  [0:0] input_4_1_q0;
output  [6:0] input_5_0_address0;
output   input_5_0_ce0;
input  [0:0] input_5_0_q0;
output  [6:0] input_5_1_address0;
output   input_5_1_ce0;
input  [0:0] input_5_1_q0;
output  [6:0] input_6_0_address0;
output   input_6_0_ce0;
input  [0:0] input_6_0_q0;
output  [6:0] input_6_1_address0;
output   input_6_1_ce0;
input  [0:0] input_6_1_q0;
output  [6:0] input_7_0_address0;
output   input_7_0_ce0;
input  [0:0] input_7_0_q0;
output  [6:0] input_7_1_address0;
output   input_7_1_ce0;
input  [0:0] input_7_1_q0;
output  [6:0] input_8_0_address0;
output   input_8_0_ce0;
input  [0:0] input_8_0_q0;
output  [6:0] input_8_1_address0;
output   input_8_1_ce0;
input  [0:0] input_8_1_q0;
output  [6:0] input_9_0_address0;
output   input_9_0_ce0;
input  [0:0] input_9_0_q0;
output  [6:0] input_9_1_address0;
output   input_9_1_ce0;
input  [0:0] input_9_1_q0;
output  [6:0] input_10_0_address0;
output   input_10_0_ce0;
input  [0:0] input_10_0_q0;
output  [6:0] input_10_1_address0;
output   input_10_1_ce0;
input  [0:0] input_10_1_q0;
output  [6:0] input_11_0_address0;
output   input_11_0_ce0;
input  [0:0] input_11_0_q0;
output  [6:0] input_11_1_address0;
output   input_11_1_ce0;
input  [0:0] input_11_1_q0;
output  [6:0] input_12_0_address0;
output   input_12_0_ce0;
input  [0:0] input_12_0_q0;
output  [6:0] input_12_1_address0;
output   input_12_1_ce0;
input  [0:0] input_12_1_q0;
output  [6:0] input_13_0_address0;
output   input_13_0_ce0;
input  [0:0] input_13_0_q0;
output  [6:0] input_13_1_address0;
output   input_13_1_ce0;
input  [0:0] input_13_1_q0;
output  [6:0] input_14_0_address0;
output   input_14_0_ce0;
input  [0:0] input_14_0_q0;
output  [6:0] input_14_1_address0;
output   input_14_1_ce0;
input  [0:0] input_14_1_q0;
output  [6:0] input_15_0_address0;
output   input_15_0_ce0;
input  [0:0] input_15_0_q0;
output  [6:0] input_15_1_address0;
output   input_15_1_ce0;
input  [0:0] input_15_1_q0;
output  [6:0] output_0_address0;
output   output_0_ce0;
output   output_0_we0;
output  [0:0] output_0_d0;
output  [6:0] output_1_address0;
output   output_1_ce0;
output   output_1_we0;
output  [0:0] output_1_d0;
output  [6:0] output_2_address0;
output   output_2_ce0;
output   output_2_we0;
output  [0:0] output_2_d0;
output  [6:0] output_3_address0;
output   output_3_ce0;
output   output_3_we0;
output  [0:0] output_3_d0;
output  [6:0] output_4_address0;
output   output_4_ce0;
output   output_4_we0;
output  [0:0] output_4_d0;
output  [6:0] output_5_address0;
output   output_5_ce0;
output   output_5_we0;
output  [0:0] output_5_d0;
output  [6:0] output_6_address0;
output   output_6_ce0;
output   output_6_we0;
output  [0:0] output_6_d0;
output  [6:0] output_7_address0;
output   output_7_ce0;
output   output_7_we0;
output  [0:0] output_7_d0;

reg ap_idle;
reg input_0_0_ce0;
reg input_0_1_ce0;
reg input_1_0_ce0;
reg input_1_1_ce0;
reg input_2_0_ce0;
reg input_2_1_ce0;
reg input_3_0_ce0;
reg input_3_1_ce0;
reg input_4_0_ce0;
reg input_4_1_ce0;
reg input_5_0_ce0;
reg input_5_1_ce0;
reg input_6_0_ce0;
reg input_6_1_ce0;
reg input_7_0_ce0;
reg input_7_1_ce0;
reg input_8_0_ce0;
reg input_8_1_ce0;
reg input_9_0_ce0;
reg input_9_1_ce0;
reg input_10_0_ce0;
reg input_10_1_ce0;
reg input_11_0_ce0;
reg input_11_1_ce0;
reg input_12_0_ce0;
reg input_12_1_ce0;
reg input_13_0_ce0;
reg input_13_1_ce0;
reg input_14_0_ce0;
reg input_14_1_ce0;
reg input_15_0_ce0;
reg input_15_1_ce0;
reg output_0_ce0;
reg output_0_we0;
reg output_1_ce0;
reg output_1_we0;
reg output_2_ce0;
reg output_2_we0;
reg output_3_ce0;
reg output_3_we0;
reg output_4_ce0;
reg output_4_we0;
reg output_5_ce0;
reg output_5_we0;
reg output_6_ce0;
reg output_6_we0;
reg output_7_ce0;
reg output_7_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln130_fu_672_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln137_1_fu_740_p1;
reg   [63:0] zext_ln137_1_reg_973;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [3:0] x_fu_122;
wire   [3:0] add_ln131_fu_776_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_x_load;
reg   [4:0] m_fu_126;
wire   [4:0] select_ln130_1_fu_710_p3;
reg   [4:0] ap_sig_allocacmp_m_load;
reg   [7:0] indvar_flatten_fu_130;
wire   [7:0] add_ln130_1_fu_678_p2;
reg   [7:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln131_fu_696_p2;
wire   [4:0] add_ln130_fu_690_p2;
wire   [3:0] trunc_ln137_fu_718_p1;
wire   [3:0] select_ln130_fu_702_p3;
wire   [6:0] tmp_fu_722_p3;
wire   [6:0] zext_ln137_fu_730_p1;
wire   [6:0] add_ln137_fu_734_p2;
wire   [0:0] or_ln137_1_fu_803_p2;
wire   [0:0] or_ln137_fu_797_p2;
wire   [0:0] or_ln137_4_fu_822_p2;
wire   [0:0] or_ln137_3_fu_816_p2;
wire   [0:0] or_ln137_7_fu_841_p2;
wire   [0:0] or_ln137_6_fu_835_p2;
wire   [0:0] or_ln137_10_fu_860_p2;
wire   [0:0] or_ln137_9_fu_854_p2;
wire   [0:0] or_ln137_13_fu_879_p2;
wire   [0:0] or_ln137_12_fu_873_p2;
wire   [0:0] or_ln137_16_fu_898_p2;
wire   [0:0] or_ln137_15_fu_892_p2;
wire   [0:0] or_ln137_19_fu_917_p2;
wire   [0:0] or_ln137_18_fu_911_p2;
wire   [0:0] or_ln137_22_fu_936_p2;
wire   [0:0] or_ln137_21_fu_930_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

dut_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln130_fu_672_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_130 <= add_ln130_1_fu_678_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_130 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln130_fu_672_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            m_fu_126 <= select_ln130_1_fu_710_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            m_fu_126 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln130_fu_672_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            x_fu_122 <= add_ln131_fu_776_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            x_fu_122 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln130_fu_672_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln137_1_reg_973[6 : 0] <= zext_ln137_1_fu_740_p1[6 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_672_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_130;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_m_load = 5'd0;
    end else begin
        ap_sig_allocacmp_m_load = m_fu_126;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_x_load = 4'd0;
    end else begin
        ap_sig_allocacmp_x_load = x_fu_122;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_0_0_ce0 = 1'b1;
    end else begin
        input_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_0_1_ce0 = 1'b1;
    end else begin
        input_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_10_0_ce0 = 1'b1;
    end else begin
        input_10_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_10_1_ce0 = 1'b1;
    end else begin
        input_10_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_11_0_ce0 = 1'b1;
    end else begin
        input_11_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_11_1_ce0 = 1'b1;
    end else begin
        input_11_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_12_0_ce0 = 1'b1;
    end else begin
        input_12_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_12_1_ce0 = 1'b1;
    end else begin
        input_12_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_13_0_ce0 = 1'b1;
    end else begin
        input_13_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_13_1_ce0 = 1'b1;
    end else begin
        input_13_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_14_0_ce0 = 1'b1;
    end else begin
        input_14_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_14_1_ce0 = 1'b1;
    end else begin
        input_14_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_15_0_ce0 = 1'b1;
    end else begin
        input_15_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_15_1_ce0 = 1'b1;
    end else begin
        input_15_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_1_0_ce0 = 1'b1;
    end else begin
        input_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_1_1_ce0 = 1'b1;
    end else begin
        input_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_2_0_ce0 = 1'b1;
    end else begin
        input_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_2_1_ce0 = 1'b1;
    end else begin
        input_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_3_0_ce0 = 1'b1;
    end else begin
        input_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_3_1_ce0 = 1'b1;
    end else begin
        input_3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_4_0_ce0 = 1'b1;
    end else begin
        input_4_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_4_1_ce0 = 1'b1;
    end else begin
        input_4_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_5_0_ce0 = 1'b1;
    end else begin
        input_5_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_5_1_ce0 = 1'b1;
    end else begin
        input_5_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_6_0_ce0 = 1'b1;
    end else begin
        input_6_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_6_1_ce0 = 1'b1;
    end else begin
        input_6_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_7_0_ce0 = 1'b1;
    end else begin
        input_7_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_7_1_ce0 = 1'b1;
    end else begin
        input_7_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_8_0_ce0 = 1'b1;
    end else begin
        input_8_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_8_1_ce0 = 1'b1;
    end else begin
        input_8_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_9_0_ce0 = 1'b1;
    end else begin
        input_9_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_9_1_ce0 = 1'b1;
    end else begin
        input_9_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_0_ce0 = 1'b1;
    end else begin
        output_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_0_we0 = 1'b1;
    end else begin
        output_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_1_ce0 = 1'b1;
    end else begin
        output_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_1_we0 = 1'b1;
    end else begin
        output_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_2_ce0 = 1'b1;
    end else begin
        output_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_2_we0 = 1'b1;
    end else begin
        output_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_3_ce0 = 1'b1;
    end else begin
        output_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_3_we0 = 1'b1;
    end else begin
        output_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_4_ce0 = 1'b1;
    end else begin
        output_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_4_we0 = 1'b1;
    end else begin
        output_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_5_ce0 = 1'b1;
    end else begin
        output_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_5_we0 = 1'b1;
    end else begin
        output_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_6_ce0 = 1'b1;
    end else begin
        output_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_6_we0 = 1'b1;
    end else begin
        output_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_7_ce0 = 1'b1;
    end else begin
        output_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_7_we0 = 1'b1;
    end else begin
        output_7_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln130_1_fu_678_p2 = (ap_sig_allocacmp_indvar_flatten_load + 8'd1);

assign add_ln130_fu_690_p2 = (ap_sig_allocacmp_m_load + 5'd1);

assign add_ln131_fu_776_p2 = (select_ln130_fu_702_p3 + 4'd1);

assign add_ln137_fu_734_p2 = (tmp_fu_722_p3 + zext_ln137_fu_730_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln130_fu_672_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln131_fu_696_p2 = ((ap_sig_allocacmp_x_load == 4'd8) ? 1'b1 : 1'b0);

assign input_0_0_address0 = zext_ln137_1_fu_740_p1;

assign input_0_1_address0 = zext_ln137_1_fu_740_p1;

assign input_10_0_address0 = zext_ln137_1_fu_740_p1;

assign input_10_1_address0 = zext_ln137_1_fu_740_p1;

assign input_11_0_address0 = zext_ln137_1_fu_740_p1;

assign input_11_1_address0 = zext_ln137_1_fu_740_p1;

assign input_12_0_address0 = zext_ln137_1_fu_740_p1;

assign input_12_1_address0 = zext_ln137_1_fu_740_p1;

assign input_13_0_address0 = zext_ln137_1_fu_740_p1;

assign input_13_1_address0 = zext_ln137_1_fu_740_p1;

assign input_14_0_address0 = zext_ln137_1_fu_740_p1;

assign input_14_1_address0 = zext_ln137_1_fu_740_p1;

assign input_15_0_address0 = zext_ln137_1_fu_740_p1;

assign input_15_1_address0 = zext_ln137_1_fu_740_p1;

assign input_1_0_address0 = zext_ln137_1_fu_740_p1;

assign input_1_1_address0 = zext_ln137_1_fu_740_p1;

assign input_2_0_address0 = zext_ln137_1_fu_740_p1;

assign input_2_1_address0 = zext_ln137_1_fu_740_p1;

assign input_3_0_address0 = zext_ln137_1_fu_740_p1;

assign input_3_1_address0 = zext_ln137_1_fu_740_p1;

assign input_4_0_address0 = zext_ln137_1_fu_740_p1;

assign input_4_1_address0 = zext_ln137_1_fu_740_p1;

assign input_5_0_address0 = zext_ln137_1_fu_740_p1;

assign input_5_1_address0 = zext_ln137_1_fu_740_p1;

assign input_6_0_address0 = zext_ln137_1_fu_740_p1;

assign input_6_1_address0 = zext_ln137_1_fu_740_p1;

assign input_7_0_address0 = zext_ln137_1_fu_740_p1;

assign input_7_1_address0 = zext_ln137_1_fu_740_p1;

assign input_8_0_address0 = zext_ln137_1_fu_740_p1;

assign input_8_1_address0 = zext_ln137_1_fu_740_p1;

assign input_9_0_address0 = zext_ln137_1_fu_740_p1;

assign input_9_1_address0 = zext_ln137_1_fu_740_p1;

assign or_ln137_10_fu_860_p2 = (input_7_1_q0 | input_6_1_q0);

assign or_ln137_12_fu_873_p2 = (input_9_0_q0 | input_8_0_q0);

assign or_ln137_13_fu_879_p2 = (input_9_1_q0 | input_8_1_q0);

assign or_ln137_15_fu_892_p2 = (input_11_0_q0 | input_10_0_q0);

assign or_ln137_16_fu_898_p2 = (input_11_1_q0 | input_10_1_q0);

assign or_ln137_18_fu_911_p2 = (input_13_0_q0 | input_12_0_q0);

assign or_ln137_19_fu_917_p2 = (input_13_1_q0 | input_12_1_q0);

assign or_ln137_1_fu_803_p2 = (input_1_1_q0 | input_0_1_q0);

assign or_ln137_21_fu_930_p2 = (input_15_0_q0 | input_14_0_q0);

assign or_ln137_22_fu_936_p2 = (input_15_1_q0 | input_14_1_q0);

assign or_ln137_3_fu_816_p2 = (input_3_0_q0 | input_2_0_q0);

assign or_ln137_4_fu_822_p2 = (input_3_1_q0 | input_2_1_q0);

assign or_ln137_6_fu_835_p2 = (input_5_0_q0 | input_4_0_q0);

assign or_ln137_7_fu_841_p2 = (input_5_1_q0 | input_4_1_q0);

assign or_ln137_9_fu_854_p2 = (input_7_0_q0 | input_6_0_q0);

assign or_ln137_fu_797_p2 = (input_1_0_q0 | input_0_0_q0);

assign output_0_address0 = zext_ln137_1_reg_973;

assign output_0_d0 = (or_ln137_fu_797_p2 | or_ln137_1_fu_803_p2);

assign output_1_address0 = zext_ln137_1_reg_973;

assign output_1_d0 = (or_ln137_4_fu_822_p2 | or_ln137_3_fu_816_p2);

assign output_2_address0 = zext_ln137_1_reg_973;

assign output_2_d0 = (or_ln137_7_fu_841_p2 | or_ln137_6_fu_835_p2);

assign output_3_address0 = zext_ln137_1_reg_973;

assign output_3_d0 = (or_ln137_9_fu_854_p2 | or_ln137_10_fu_860_p2);

assign output_4_address0 = zext_ln137_1_reg_973;

assign output_4_d0 = (or_ln137_13_fu_879_p2 | or_ln137_12_fu_873_p2);

assign output_5_address0 = zext_ln137_1_reg_973;

assign output_5_d0 = (or_ln137_16_fu_898_p2 | or_ln137_15_fu_892_p2);

assign output_6_address0 = zext_ln137_1_reg_973;

assign output_6_d0 = (or_ln137_19_fu_917_p2 | or_ln137_18_fu_911_p2);

assign output_7_address0 = zext_ln137_1_reg_973;

assign output_7_d0 = (or_ln137_22_fu_936_p2 | or_ln137_21_fu_930_p2);

assign select_ln130_1_fu_710_p3 = ((icmp_ln131_fu_696_p2[0:0] == 1'b1) ? add_ln130_fu_690_p2 : ap_sig_allocacmp_m_load);

assign select_ln130_fu_702_p3 = ((icmp_ln131_fu_696_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_x_load);

assign tmp_fu_722_p3 = {{trunc_ln137_fu_718_p1}, {3'd0}};

assign trunc_ln137_fu_718_p1 = select_ln130_1_fu_710_p3[3:0];

assign zext_ln137_1_fu_740_p1 = add_ln137_fu_734_p2;

assign zext_ln137_fu_730_p1 = select_ln130_fu_702_p3;

always @ (posedge ap_clk) begin
    zext_ln137_1_reg_973[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //dut_max_pool_16_16_s
