// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_bnn_xcel_Pipeline_outer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv2_pooled_address0,
        conv2_pooled_ce0,
        conv2_pooled_q0,
        conv2_pooled_address1,
        conv2_pooled_ce1,
        conv2_pooled_q1,
        conv2_pooled_address2,
        conv2_pooled_ce2,
        conv2_pooled_q2,
        conv2_pooled_address3,
        conv2_pooled_ce3,
        conv2_pooled_q3,
        conv2_pooled_1_address0,
        conv2_pooled_1_ce0,
        conv2_pooled_1_q0,
        conv2_pooled_1_address1,
        conv2_pooled_1_ce1,
        conv2_pooled_1_q1,
        conv2_pooled_1_address2,
        conv2_pooled_1_ce2,
        conv2_pooled_1_q2,
        conv2_pooled_1_address3,
        conv2_pooled_1_ce3,
        conv2_pooled_1_q3,
        conv2_pooled_2_address0,
        conv2_pooled_2_ce0,
        conv2_pooled_2_q0,
        conv2_pooled_2_address1,
        conv2_pooled_2_ce1,
        conv2_pooled_2_q1,
        conv2_pooled_2_address2,
        conv2_pooled_2_ce2,
        conv2_pooled_2_q2,
        conv2_pooled_2_address3,
        conv2_pooled_2_ce3,
        conv2_pooled_2_q3,
        conv2_pooled_3_address0,
        conv2_pooled_3_ce0,
        conv2_pooled_3_q0,
        conv2_pooled_3_address1,
        conv2_pooled_3_ce1,
        conv2_pooled_3_q1,
        conv2_pooled_3_address2,
        conv2_pooled_3_ce2,
        conv2_pooled_3_q2,
        conv2_pooled_3_address3,
        conv2_pooled_3_ce3,
        conv2_pooled_3_q3,
        reshaped_out,
        reshaped_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] conv2_pooled_address0;
output   conv2_pooled_ce0;
input  [0:0] conv2_pooled_q0;
output  [6:0] conv2_pooled_address1;
output   conv2_pooled_ce1;
input  [0:0] conv2_pooled_q1;
output  [6:0] conv2_pooled_address2;
output   conv2_pooled_ce2;
input  [0:0] conv2_pooled_q2;
output  [6:0] conv2_pooled_address3;
output   conv2_pooled_ce3;
input  [0:0] conv2_pooled_q3;
output  [6:0] conv2_pooled_1_address0;
output   conv2_pooled_1_ce0;
input  [0:0] conv2_pooled_1_q0;
output  [6:0] conv2_pooled_1_address1;
output   conv2_pooled_1_ce1;
input  [0:0] conv2_pooled_1_q1;
output  [6:0] conv2_pooled_1_address2;
output   conv2_pooled_1_ce2;
input  [0:0] conv2_pooled_1_q2;
output  [6:0] conv2_pooled_1_address3;
output   conv2_pooled_1_ce3;
input  [0:0] conv2_pooled_1_q3;
output  [6:0] conv2_pooled_2_address0;
output   conv2_pooled_2_ce0;
input  [0:0] conv2_pooled_2_q0;
output  [6:0] conv2_pooled_2_address1;
output   conv2_pooled_2_ce1;
input  [0:0] conv2_pooled_2_q1;
output  [6:0] conv2_pooled_2_address2;
output   conv2_pooled_2_ce2;
input  [0:0] conv2_pooled_2_q2;
output  [6:0] conv2_pooled_2_address3;
output   conv2_pooled_2_ce3;
input  [0:0] conv2_pooled_2_q3;
output  [6:0] conv2_pooled_3_address0;
output   conv2_pooled_3_ce0;
input  [0:0] conv2_pooled_3_q0;
output  [6:0] conv2_pooled_3_address1;
output   conv2_pooled_3_ce1;
input  [0:0] conv2_pooled_3_q1;
output  [6:0] conv2_pooled_3_address2;
output   conv2_pooled_3_ce2;
input  [0:0] conv2_pooled_3_q2;
output  [6:0] conv2_pooled_3_address3;
output   conv2_pooled_3_ce3;
input  [0:0] conv2_pooled_3_q3;
output  [511:0] reshaped_out;
output   reshaped_out_ap_vld;

reg ap_idle;
reg conv2_pooled_ce0;
reg conv2_pooled_ce1;
reg conv2_pooled_ce2;
reg conv2_pooled_ce3;
reg conv2_pooled_1_ce0;
reg conv2_pooled_1_ce1;
reg conv2_pooled_1_ce2;
reg conv2_pooled_1_ce3;
reg conv2_pooled_2_ce0;
reg conv2_pooled_2_ce1;
reg conv2_pooled_2_ce2;
reg conv2_pooled_2_ce3;
reg conv2_pooled_3_ce0;
reg conv2_pooled_3_ce1;
reg conv2_pooled_3_ce2;
reg conv2_pooled_3_ce3;
reg reshaped_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln154_fu_293_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [5:0] c_reg_702;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln159_1_fu_313_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln159_2_fu_327_p1;
wire   [63:0] zext_ln159_3_fu_341_p1;
wire   [63:0] zext_ln159_5_fu_355_p1;
reg   [5:0] o_index_fu_70;
wire   [5:0] add_ln154_fu_299_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_c;
reg   [511:0] reshaped_fu_74;
reg   [511:0] tmp_2032_fu_669_p4;
wire    ap_block_pp0_stage0_01001;
wire   [4:0] trunc_ln154_fu_289_p1;
wire   [6:0] tmp_s_fu_305_p3;
wire   [6:0] or_ln159_fu_321_p2;
wire   [6:0] or_ln159_1_fu_335_p2;
wire   [6:0] or_ln159_2_fu_349_p2;
wire   [63:0] zext_ln154_fu_371_p1;
wire  signed [5:0] xor_ln158_fu_390_p2;
reg   [511:0] tmp_fu_380_p4;
wire   [63:0] zext_ln159_fu_395_p1;
wire  signed [6:0] zext_ln159_1_cast_fu_409_p3;
reg   [511:0] tmp_2018_fu_399_p4;
wire   [63:0] zext_ln159_6_fu_416_p1;
wire  signed [6:0] sext_ln159_fu_430_p1;
reg   [511:0] tmp_2019_fu_420_p4;
wire   [63:0] zext_ln159_7_fu_434_p1;
wire  signed [7:0] zext_ln159_3_cast_fu_448_p3;
reg   [511:0] tmp_2020_fu_438_p4;
wire   [63:0] zext_ln159_9_fu_455_p1;
wire   [7:0] zext_ln154_2_fu_377_p1;
wire  signed [7:0] add_ln158_fu_469_p2;
reg   [511:0] tmp_2021_fu_459_p4;
wire   [63:0] zext_ln159_4_fu_475_p1;
wire  signed [7:0] sext_ln159_1_fu_489_p1;
reg   [511:0] tmp_2022_fu_479_p4;
wire   [63:0] zext_ln159_11_fu_493_p1;
wire  signed [7:0] sext_ln159_2_fu_507_p1;
reg   [511:0] tmp_2023_fu_497_p4;
wire   [63:0] zext_ln159_12_fu_511_p1;
wire   [8:0] zext_ln159_7_cast_fu_525_p3;
reg   [511:0] tmp_2024_fu_515_p4;
wire   [63:0] zext_ln159_13_fu_532_p1;
wire   [8:0] zext_ln154_1_fu_374_p1;
wire   [8:0] add_ln158_1_fu_546_p2;
reg   [511:0] tmp_2025_fu_536_p4;
wire   [63:0] zext_ln159_8_fu_552_p1;
wire   [8:0] zext_ln159_9_cast_fu_566_p3;
reg   [511:0] tmp_2026_fu_556_p4;
wire   [63:0] zext_ln159_14_fu_573_p1;
wire   [8:0] add_ln158_2_fu_587_p2;
reg   [511:0] tmp_2027_fu_577_p4;
wire   [63:0] zext_ln159_10_fu_593_p1;
wire  signed [8:0] sext_ln159_3_fu_607_p1;
reg   [511:0] tmp_2028_fu_597_p4;
wire   [63:0] zext_ln159_15_fu_611_p1;
wire  signed [8:0] sext_ln159_4_fu_625_p1;
reg   [511:0] tmp_2029_fu_615_p4;
wire   [63:0] zext_ln159_16_fu_629_p1;
wire  signed [8:0] sext_ln159_5_fu_643_p1;
reg   [511:0] tmp_2030_fu_633_p4;
wire   [63:0] zext_ln159_17_fu_647_p1;
wire  signed [8:0] sext_ln159_6_fu_661_p1;
reg   [511:0] tmp_2031_fu_651_p4;
wire   [63:0] zext_ln159_18_fu_665_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

dut_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln154_fu_293_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            o_index_fu_70 <= add_ln154_fu_299_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            o_index_fu_70 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_reg_702 <= ap_sig_allocacmp_c;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reshaped_fu_74 <= tmp_2032_fu_669_p4;
    end
end

always @ (*) begin
    if (((icmp_ln154_fu_293_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_c = 6'd0;
    end else begin
        ap_sig_allocacmp_c = o_index_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2_pooled_1_ce0 = 1'b1;
    end else begin
        conv2_pooled_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2_pooled_1_ce1 = 1'b1;
    end else begin
        conv2_pooled_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2_pooled_1_ce2 = 1'b1;
    end else begin
        conv2_pooled_1_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2_pooled_1_ce3 = 1'b1;
    end else begin
        conv2_pooled_1_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2_pooled_2_ce0 = 1'b1;
    end else begin
        conv2_pooled_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2_pooled_2_ce1 = 1'b1;
    end else begin
        conv2_pooled_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2_pooled_2_ce2 = 1'b1;
    end else begin
        conv2_pooled_2_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2_pooled_2_ce3 = 1'b1;
    end else begin
        conv2_pooled_2_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2_pooled_3_ce0 = 1'b1;
    end else begin
        conv2_pooled_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2_pooled_3_ce1 = 1'b1;
    end else begin
        conv2_pooled_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2_pooled_3_ce2 = 1'b1;
    end else begin
        conv2_pooled_3_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2_pooled_3_ce3 = 1'b1;
    end else begin
        conv2_pooled_3_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2_pooled_ce0 = 1'b1;
    end else begin
        conv2_pooled_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2_pooled_ce1 = 1'b1;
    end else begin
        conv2_pooled_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2_pooled_ce2 = 1'b1;
    end else begin
        conv2_pooled_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2_pooled_ce3 = 1'b1;
    end else begin
        conv2_pooled_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln154_fu_293_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reshaped_out_ap_vld = 1'b1;
    end else begin
        reshaped_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln154_fu_299_p2 = (ap_sig_allocacmp_c + 6'd1);

assign add_ln158_1_fu_546_p2 = ($signed(zext_ln154_1_fu_374_p1) + $signed(9'd288));

assign add_ln158_2_fu_587_p2 = ($signed(zext_ln154_1_fu_374_p1) + $signed(9'd352));

assign add_ln158_fu_469_p2 = ($signed(zext_ln154_2_fu_377_p1) + $signed(8'd160));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign conv2_pooled_1_address0 = zext_ln159_5_fu_355_p1;

assign conv2_pooled_1_address1 = zext_ln159_3_fu_341_p1;

assign conv2_pooled_1_address2 = zext_ln159_2_fu_327_p1;

assign conv2_pooled_1_address3 = zext_ln159_1_fu_313_p1;

assign conv2_pooled_2_address0 = zext_ln159_5_fu_355_p1;

assign conv2_pooled_2_address1 = zext_ln159_3_fu_341_p1;

assign conv2_pooled_2_address2 = zext_ln159_2_fu_327_p1;

assign conv2_pooled_2_address3 = zext_ln159_1_fu_313_p1;

assign conv2_pooled_3_address0 = zext_ln159_5_fu_355_p1;

assign conv2_pooled_3_address1 = zext_ln159_3_fu_341_p1;

assign conv2_pooled_3_address2 = zext_ln159_2_fu_327_p1;

assign conv2_pooled_3_address3 = zext_ln159_1_fu_313_p1;

assign conv2_pooled_address0 = zext_ln159_5_fu_355_p1;

assign conv2_pooled_address1 = zext_ln159_3_fu_341_p1;

assign conv2_pooled_address2 = zext_ln159_2_fu_327_p1;

assign conv2_pooled_address3 = zext_ln159_1_fu_313_p1;

assign icmp_ln154_fu_293_p2 = ((ap_sig_allocacmp_c == 6'd32) ? 1'b1 : 1'b0);

assign or_ln159_1_fu_335_p2 = (tmp_s_fu_305_p3 | 7'd2);

assign or_ln159_2_fu_349_p2 = (tmp_s_fu_305_p3 | 7'd3);

assign or_ln159_fu_321_p2 = (tmp_s_fu_305_p3 | 7'd1);

assign reshaped_out = reshaped_fu_74;

assign sext_ln159_1_fu_489_p1 = zext_ln159_1_cast_fu_409_p3;

assign sext_ln159_2_fu_507_p1 = xor_ln158_fu_390_p2;

assign sext_ln159_3_fu_607_p1 = zext_ln159_3_cast_fu_448_p3;

assign sext_ln159_4_fu_625_p1 = add_ln158_fu_469_p2;

assign sext_ln159_5_fu_643_p1 = zext_ln159_1_cast_fu_409_p3;

assign sext_ln159_6_fu_661_p1 = xor_ln158_fu_390_p2;

assign sext_ln159_fu_430_p1 = xor_ln158_fu_390_p2;

always @ (*) begin
    tmp_2018_fu_399_p4 = tmp_fu_380_p4;
    tmp_2018_fu_399_p4[zext_ln159_fu_395_p1] = |(conv2_pooled_q2);
end

always @ (*) begin
    tmp_2019_fu_420_p4 = tmp_2018_fu_399_p4;
    tmp_2019_fu_420_p4[zext_ln159_6_fu_416_p1] = |(conv2_pooled_q1);
end

always @ (*) begin
    tmp_2020_fu_438_p4 = tmp_2019_fu_420_p4;
    tmp_2020_fu_438_p4[zext_ln159_7_fu_434_p1] = |(conv2_pooled_q0);
end

always @ (*) begin
    tmp_2021_fu_459_p4 = tmp_2020_fu_438_p4;
    tmp_2021_fu_459_p4[zext_ln159_9_fu_455_p1] = |(conv2_pooled_1_q3);
end

always @ (*) begin
    tmp_2022_fu_479_p4 = tmp_2021_fu_459_p4;
    tmp_2022_fu_479_p4[zext_ln159_4_fu_475_p1] = |(conv2_pooled_1_q2);
end

always @ (*) begin
    tmp_2023_fu_497_p4 = tmp_2022_fu_479_p4;
    tmp_2023_fu_497_p4[zext_ln159_11_fu_493_p1] = |(conv2_pooled_1_q1);
end

always @ (*) begin
    tmp_2024_fu_515_p4 = tmp_2023_fu_497_p4;
    tmp_2024_fu_515_p4[zext_ln159_12_fu_511_p1] = |(conv2_pooled_1_q0);
end

always @ (*) begin
    tmp_2025_fu_536_p4 = tmp_2024_fu_515_p4;
    tmp_2025_fu_536_p4[zext_ln159_13_fu_532_p1] = |(conv2_pooled_2_q3);
end

always @ (*) begin
    tmp_2026_fu_556_p4 = tmp_2025_fu_536_p4;
    tmp_2026_fu_556_p4[zext_ln159_8_fu_552_p1] = |(conv2_pooled_2_q2);
end

always @ (*) begin
    tmp_2027_fu_577_p4 = tmp_2026_fu_556_p4;
    tmp_2027_fu_577_p4[zext_ln159_14_fu_573_p1] = |(conv2_pooled_2_q1);
end

always @ (*) begin
    tmp_2028_fu_597_p4 = tmp_2027_fu_577_p4;
    tmp_2028_fu_597_p4[zext_ln159_10_fu_593_p1] = |(conv2_pooled_2_q0);
end

always @ (*) begin
    tmp_2029_fu_615_p4 = tmp_2028_fu_597_p4;
    tmp_2029_fu_615_p4[zext_ln159_15_fu_611_p1] = |(conv2_pooled_3_q3);
end

always @ (*) begin
    tmp_2030_fu_633_p4 = tmp_2029_fu_615_p4;
    tmp_2030_fu_633_p4[zext_ln159_16_fu_629_p1] = |(conv2_pooled_3_q2);
end

always @ (*) begin
    tmp_2031_fu_651_p4 = tmp_2030_fu_633_p4;
    tmp_2031_fu_651_p4[zext_ln159_17_fu_647_p1] = |(conv2_pooled_3_q1);
end

always @ (*) begin
    tmp_2032_fu_669_p4 = tmp_2031_fu_651_p4;
    tmp_2032_fu_669_p4[zext_ln159_18_fu_665_p1] = |(conv2_pooled_3_q0);
end

always @ (*) begin
    tmp_fu_380_p4 = reshaped_fu_74;
    tmp_fu_380_p4[zext_ln154_fu_371_p1] = |(conv2_pooled_q3);
end

assign tmp_s_fu_305_p3 = {{trunc_ln154_fu_289_p1}, {2'd0}};

assign trunc_ln154_fu_289_p1 = ap_sig_allocacmp_c[4:0];

assign xor_ln158_fu_390_p2 = (c_reg_702 ^ 6'd32);

assign zext_ln154_1_fu_374_p1 = c_reg_702;

assign zext_ln154_2_fu_377_p1 = c_reg_702;

assign zext_ln154_fu_371_p1 = c_reg_702;

assign zext_ln159_10_fu_593_p1 = add_ln158_2_fu_587_p2;

assign zext_ln159_11_fu_493_p1 = $unsigned(sext_ln159_1_fu_489_p1);

assign zext_ln159_12_fu_511_p1 = $unsigned(sext_ln159_2_fu_507_p1);

assign zext_ln159_13_fu_532_p1 = zext_ln159_7_cast_fu_525_p3;

assign zext_ln159_14_fu_573_p1 = zext_ln159_9_cast_fu_566_p3;

assign zext_ln159_15_fu_611_p1 = $unsigned(sext_ln159_3_fu_607_p1);

assign zext_ln159_16_fu_629_p1 = $unsigned(sext_ln159_4_fu_625_p1);

assign zext_ln159_17_fu_647_p1 = $unsigned(sext_ln159_5_fu_643_p1);

assign zext_ln159_18_fu_665_p1 = $unsigned(sext_ln159_6_fu_661_p1);

assign zext_ln159_1_cast_fu_409_p3 = {{1'd1}, {c_reg_702}};

assign zext_ln159_1_fu_313_p1 = tmp_s_fu_305_p3;

assign zext_ln159_2_fu_327_p1 = or_ln159_fu_321_p2;

assign zext_ln159_3_cast_fu_448_p3 = {{2'd2}, {c_reg_702}};

assign zext_ln159_3_fu_341_p1 = or_ln159_1_fu_335_p2;

assign zext_ln159_4_fu_475_p1 = $unsigned(add_ln158_fu_469_p2);

assign zext_ln159_5_fu_355_p1 = or_ln159_2_fu_349_p2;

assign zext_ln159_6_fu_416_p1 = $unsigned(zext_ln159_1_cast_fu_409_p3);

assign zext_ln159_7_cast_fu_525_p3 = {{3'd4}, {c_reg_702}};

assign zext_ln159_7_fu_434_p1 = $unsigned(sext_ln159_fu_430_p1);

assign zext_ln159_8_fu_552_p1 = add_ln158_1_fu_546_p2;

assign zext_ln159_9_cast_fu_566_p3 = {{3'd5}, {c_reg_702}};

assign zext_ln159_9_fu_455_p1 = $unsigned(zext_ln159_3_cast_fu_448_p3);

assign zext_ln159_fu_395_p1 = $unsigned(xor_ln158_fu_390_p2);

endmodule //dut_bnn_xcel_Pipeline_outer
