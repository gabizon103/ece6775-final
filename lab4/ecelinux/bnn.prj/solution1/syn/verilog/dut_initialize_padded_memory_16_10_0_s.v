// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_initialize_padded_memory_16_10_0_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_we0,
        input_0_d0,
        input_1_address0,
        input_1_ce0,
        input_1_we0,
        input_1_d0,
        input_2_address0,
        input_2_ce0,
        input_2_we0,
        input_2_d0,
        input_3_address0,
        input_3_ce0,
        input_3_we0,
        input_3_d0,
        input_4_address0,
        input_4_ce0,
        input_4_we0,
        input_4_d0,
        input_5_address0,
        input_5_ce0,
        input_5_we0,
        input_5_d0,
        input_6_address0,
        input_6_ce0,
        input_6_we0,
        input_6_d0,
        input_7_address0,
        input_7_ce0,
        input_7_we0,
        input_7_d0,
        input_8_address0,
        input_8_ce0,
        input_8_we0,
        input_8_d0,
        input_9_address0,
        input_9_ce0,
        input_9_we0,
        input_9_d0,
        input_10_address0,
        input_10_ce0,
        input_10_we0,
        input_10_d0,
        input_11_address0,
        input_11_ce0,
        input_11_we0,
        input_11_d0,
        input_12_address0,
        input_12_ce0,
        input_12_we0,
        input_12_d0,
        input_13_address0,
        input_13_ce0,
        input_13_we0,
        input_13_d0,
        input_14_address0,
        input_14_ce0,
        input_14_we0,
        input_14_d0,
        input_15_address0,
        input_15_ce0,
        input_15_we0,
        input_15_d0
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] input_0_address0;
output   input_0_ce0;
output   input_0_we0;
output  [9:0] input_0_d0;
output  [3:0] input_1_address0;
output   input_1_ce0;
output   input_1_we0;
output  [9:0] input_1_d0;
output  [3:0] input_2_address0;
output   input_2_ce0;
output   input_2_we0;
output  [9:0] input_2_d0;
output  [3:0] input_3_address0;
output   input_3_ce0;
output   input_3_we0;
output  [9:0] input_3_d0;
output  [3:0] input_4_address0;
output   input_4_ce0;
output   input_4_we0;
output  [9:0] input_4_d0;
output  [3:0] input_5_address0;
output   input_5_ce0;
output   input_5_we0;
output  [9:0] input_5_d0;
output  [3:0] input_6_address0;
output   input_6_ce0;
output   input_6_we0;
output  [9:0] input_6_d0;
output  [3:0] input_7_address0;
output   input_7_ce0;
output   input_7_we0;
output  [9:0] input_7_d0;
output  [3:0] input_8_address0;
output   input_8_ce0;
output   input_8_we0;
output  [9:0] input_8_d0;
output  [3:0] input_9_address0;
output   input_9_ce0;
output   input_9_we0;
output  [9:0] input_9_d0;
output  [3:0] input_10_address0;
output   input_10_ce0;
output   input_10_we0;
output  [9:0] input_10_d0;
output  [3:0] input_11_address0;
output   input_11_ce0;
output   input_11_we0;
output  [9:0] input_11_d0;
output  [3:0] input_12_address0;
output   input_12_ce0;
output   input_12_we0;
output  [9:0] input_12_d0;
output  [3:0] input_13_address0;
output   input_13_ce0;
output   input_13_we0;
output  [9:0] input_13_d0;
output  [3:0] input_14_address0;
output   input_14_ce0;
output   input_14_we0;
output  [9:0] input_14_d0;
output  [3:0] input_15_address0;
output   input_15_ce0;
output   input_15_we0;
output  [9:0] input_15_d0;

reg ap_idle;
reg input_0_ce0;
reg input_0_we0;
reg input_1_ce0;
reg input_1_we0;
reg input_2_ce0;
reg input_2_we0;
reg input_3_ce0;
reg input_3_we0;
reg input_4_ce0;
reg input_4_we0;
reg input_5_ce0;
reg input_5_we0;
reg input_6_ce0;
reg input_6_we0;
reg input_7_ce0;
reg input_7_we0;
reg input_8_ce0;
reg input_8_we0;
reg input_9_ce0;
reg input_9_we0;
reg input_10_ce0;
reg input_10_we0;
reg input_11_ce0;
reg input_11_we0;
reg input_12_ce0;
reg input_12_we0;
reg input_13_ce0;
reg input_13_we0;
reg input_14_ce0;
reg input_14_we0;
reg input_15_ce0;
reg input_15_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln40_fu_350_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln41_fu_400_p1;
reg   [3:0] x_fu_96;
wire   [3:0] add_ln41_fu_420_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_x_load;
reg   [4:0] m_fu_100;
wire   [4:0] select_ln40_1_fu_388_p3;
reg   [4:0] ap_sig_allocacmp_m_load;
reg   [7:0] indvar_flatten_fu_104;
wire   [7:0] add_ln40_1_fu_356_p2;
reg   [7:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [3:0] trunc_ln40_fu_396_p1;
wire   [0:0] icmp_ln41_fu_374_p2;
wire   [4:0] add_ln40_fu_368_p2;
wire   [3:0] select_ln40_fu_380_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

dut_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln40_fu_350_p2 == 1'd0)) begin
            indvar_flatten_fu_104 <= add_ln40_1_fu_356_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_104 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln40_fu_350_p2 == 1'd0)) begin
            m_fu_100 <= select_ln40_1_fu_388_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            m_fu_100 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln40_fu_350_p2 == 1'd0)) begin
            x_fu_96 <= add_ln41_fu_420_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            x_fu_96 <= 4'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln40_fu_350_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_104;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_m_load = 5'd0;
    end else begin
        ap_sig_allocacmp_m_load = m_fu_100;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_x_load = 4'd0;
    end else begin
        ap_sig_allocacmp_x_load = x_fu_96;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln40_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln40_fu_396_p1 == 4'd0))) begin
        input_0_we0 = 1'b1;
    end else begin
        input_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_10_ce0 = 1'b1;
    end else begin
        input_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln40_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln40_fu_396_p1 == 4'd10))) begin
        input_10_we0 = 1'b1;
    end else begin
        input_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_11_ce0 = 1'b1;
    end else begin
        input_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln40_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln40_fu_396_p1 == 4'd11))) begin
        input_11_we0 = 1'b1;
    end else begin
        input_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_12_ce0 = 1'b1;
    end else begin
        input_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln40_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln40_fu_396_p1 == 4'd12))) begin
        input_12_we0 = 1'b1;
    end else begin
        input_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_13_ce0 = 1'b1;
    end else begin
        input_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln40_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln40_fu_396_p1 == 4'd13))) begin
        input_13_we0 = 1'b1;
    end else begin
        input_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_14_ce0 = 1'b1;
    end else begin
        input_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln40_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln40_fu_396_p1 == 4'd14))) begin
        input_14_we0 = 1'b1;
    end else begin
        input_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_15_ce0 = 1'b1;
    end else begin
        input_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln40_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln40_fu_396_p1 == 4'd15))) begin
        input_15_we0 = 1'b1;
    end else begin
        input_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_1_ce0 = 1'b1;
    end else begin
        input_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln40_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln40_fu_396_p1 == 4'd1))) begin
        input_1_we0 = 1'b1;
    end else begin
        input_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_2_ce0 = 1'b1;
    end else begin
        input_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln40_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln40_fu_396_p1 == 4'd2))) begin
        input_2_we0 = 1'b1;
    end else begin
        input_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_3_ce0 = 1'b1;
    end else begin
        input_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln40_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln40_fu_396_p1 == 4'd3))) begin
        input_3_we0 = 1'b1;
    end else begin
        input_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_4_ce0 = 1'b1;
    end else begin
        input_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln40_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln40_fu_396_p1 == 4'd4))) begin
        input_4_we0 = 1'b1;
    end else begin
        input_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_5_ce0 = 1'b1;
    end else begin
        input_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln40_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln40_fu_396_p1 == 4'd5))) begin
        input_5_we0 = 1'b1;
    end else begin
        input_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_6_ce0 = 1'b1;
    end else begin
        input_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln40_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln40_fu_396_p1 == 4'd6))) begin
        input_6_we0 = 1'b1;
    end else begin
        input_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_7_ce0 = 1'b1;
    end else begin
        input_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln40_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln40_fu_396_p1 == 4'd7))) begin
        input_7_we0 = 1'b1;
    end else begin
        input_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_8_ce0 = 1'b1;
    end else begin
        input_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln40_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln40_fu_396_p1 == 4'd8))) begin
        input_8_we0 = 1'b1;
    end else begin
        input_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_9_ce0 = 1'b1;
    end else begin
        input_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln40_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln40_fu_396_p1 == 4'd9))) begin
        input_9_we0 = 1'b1;
    end else begin
        input_9_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln40_1_fu_356_p2 = (ap_sig_allocacmp_indvar_flatten_load + 8'd1);

assign add_ln40_fu_368_p2 = (ap_sig_allocacmp_m_load + 5'd1);

assign add_ln41_fu_420_p2 = (select_ln40_fu_380_p3 + 4'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln40_fu_350_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 8'd160) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_374_p2 = ((ap_sig_allocacmp_x_load == 4'd10) ? 1'b1 : 1'b0);

assign input_0_address0 = zext_ln41_fu_400_p1;

assign input_0_d0 = 10'd0;

assign input_10_address0 = zext_ln41_fu_400_p1;

assign input_10_d0 = 10'd0;

assign input_11_address0 = zext_ln41_fu_400_p1;

assign input_11_d0 = 10'd0;

assign input_12_address0 = zext_ln41_fu_400_p1;

assign input_12_d0 = 10'd0;

assign input_13_address0 = zext_ln41_fu_400_p1;

assign input_13_d0 = 10'd0;

assign input_14_address0 = zext_ln41_fu_400_p1;

assign input_14_d0 = 10'd0;

assign input_15_address0 = zext_ln41_fu_400_p1;

assign input_15_d0 = 10'd0;

assign input_1_address0 = zext_ln41_fu_400_p1;

assign input_1_d0 = 10'd0;

assign input_2_address0 = zext_ln41_fu_400_p1;

assign input_2_d0 = 10'd0;

assign input_3_address0 = zext_ln41_fu_400_p1;

assign input_3_d0 = 10'd0;

assign input_4_address0 = zext_ln41_fu_400_p1;

assign input_4_d0 = 10'd0;

assign input_5_address0 = zext_ln41_fu_400_p1;

assign input_5_d0 = 10'd0;

assign input_6_address0 = zext_ln41_fu_400_p1;

assign input_6_d0 = 10'd0;

assign input_7_address0 = zext_ln41_fu_400_p1;

assign input_7_d0 = 10'd0;

assign input_8_address0 = zext_ln41_fu_400_p1;

assign input_8_d0 = 10'd0;

assign input_9_address0 = zext_ln41_fu_400_p1;

assign input_9_d0 = 10'd0;

assign select_ln40_1_fu_388_p3 = ((icmp_ln41_fu_374_p2[0:0] == 1'b1) ? add_ln40_fu_368_p2 : ap_sig_allocacmp_m_load);

assign select_ln40_fu_380_p3 = ((icmp_ln41_fu_374_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_x_load);

assign trunc_ln40_fu_396_p1 = select_ln40_1_fu_388_p3[3:0];

assign zext_ln41_fu_400_p1 = select_ln40_fu_380_p3;

endmodule //dut_initialize_padded_memory_16_10_0_s
