-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    strm_in_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    strm_in_empty_n : IN STD_LOGIC;
    strm_in_read : OUT STD_LOGIC;
    strm_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    strm_out_full_n : IN STD_LOGIC;
    strm_out_write : OUT STD_LOGIC );
end;


architecture behav of dut is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dut_dut,hls_ip_2022_1_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.130500,HLS_SYN_LAT=3835,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=0,HLS_SYN_FF=5847,HLS_SYN_LUT=45298,HLS_VERSION=2022_1_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal strm_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal input_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_0_ce0 : STD_LOGIC;
    signal input_0_we0 : STD_LOGIC;
    signal input_0_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_0_ce1 : STD_LOGIC;
    signal input_0_we1 : STD_LOGIC;
    signal grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_ap_start : STD_LOGIC;
    signal grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_ap_done : STD_LOGIC;
    signal grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_ap_idle : STD_LOGIC;
    signal grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_ap_ready : STD_LOGIC;
    signal grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_strm_in_read : STD_LOGIC;
    signal grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_ce0 : STD_LOGIC;
    signal grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_we0 : STD_LOGIC;
    signal grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_ce1 : STD_LOGIC;
    signal grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_we1 : STD_LOGIC;
    signal grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_d1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_bnn_xcel_fu_367_ap_start : STD_LOGIC;
    signal grp_bnn_xcel_fu_367_ap_done : STD_LOGIC;
    signal grp_bnn_xcel_fu_367_ap_idle : STD_LOGIC;
    signal grp_bnn_xcel_fu_367_ap_ready : STD_LOGIC;
    signal grp_bnn_xcel_fu_367_input_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_bnn_xcel_fu_367_input_0_ce0 : STD_LOGIC;
    signal grp_bnn_xcel_fu_367_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_bnn_xcel_fu_367_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dut_dut_Pipeline_VITIS_LOOP_26_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        strm_in_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        strm_in_empty_n : IN STD_LOGIC;
        strm_in_read : OUT STD_LOGIC;
        input_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_0_ce0 : OUT STD_LOGIC;
        input_0_we0 : OUT STD_LOGIC;
        input_0_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        input_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_0_ce1 : OUT STD_LOGIC;
        input_0_we1 : OUT STD_LOGIC;
        input_0_d1 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_bnn_xcel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_0_ce0 : OUT STD_LOGIC;
        input_0_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component dut_input_0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    input_0_U : component dut_input_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 1,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_0_address0,
        ce0 => input_0_ce0,
        we0 => input_0_we0,
        d0 => grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_d0,
        q0 => input_0_q0,
        address1 => grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_address1,
        ce1 => input_0_ce1,
        we1 => input_0_we1,
        d1 => grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_d1);

    grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359 : component dut_dut_Pipeline_VITIS_LOOP_26_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_ap_start,
        ap_done => grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_ap_done,
        ap_idle => grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_ap_idle,
        ap_ready => grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_ap_ready,
        strm_in_dout => strm_in_dout,
        strm_in_empty_n => strm_in_empty_n,
        strm_in_read => grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_strm_in_read,
        input_0_address0 => grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_address0,
        input_0_ce0 => grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_ce0,
        input_0_we0 => grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_we0,
        input_0_d0 => grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_d0,
        input_0_address1 => grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_address1,
        input_0_ce1 => grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_ce1,
        input_0_we1 => grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_we1,
        input_0_d1 => grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_d1);

    grp_bnn_xcel_fu_367 : component dut_bnn_xcel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bnn_xcel_fu_367_ap_start,
        ap_done => grp_bnn_xcel_fu_367_ap_done,
        ap_idle => grp_bnn_xcel_fu_367_ap_idle,
        ap_ready => grp_bnn_xcel_fu_367_ap_ready,
        input_0_address0 => grp_bnn_xcel_fu_367_input_0_address0,
        input_0_ce0 => grp_bnn_xcel_fu_367_input_0_ce0,
        input_0_q0 => input_0_q0,
        ap_return => grp_bnn_xcel_fu_367_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_bnn_xcel_fu_367_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bnn_xcel_fu_367_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_bnn_xcel_fu_367_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bnn_xcel_fu_367_ap_ready = ap_const_logic_1)) then 
                    grp_bnn_xcel_fu_367_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_ap_ready = ap_const_logic_1)) then 
                    grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, strm_out_full_n, ap_CS_fsm_state4, grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_ap_done, grp_bnn_xcel_fu_367_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if ((not(((grp_bnn_xcel_fu_367_ap_done = ap_const_logic_0) or (strm_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_ap_done)
    begin
        if ((grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(strm_out_full_n, grp_bnn_xcel_fu_367_ap_done)
    begin
        if (((grp_bnn_xcel_fu_367_ap_done = ap_const_logic_0) or (strm_out_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(strm_out_full_n, ap_CS_fsm_state4, grp_bnn_xcel_fu_367_ap_done)
    begin
        if ((not(((grp_bnn_xcel_fu_367_ap_done = ap_const_logic_0) or (strm_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(strm_out_full_n, ap_CS_fsm_state4, grp_bnn_xcel_fu_367_ap_done)
    begin
        if ((not(((grp_bnn_xcel_fu_367_ap_done = ap_const_logic_0) or (strm_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_bnn_xcel_fu_367_ap_start <= grp_bnn_xcel_fu_367_ap_start_reg;
    grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_ap_start <= grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_ap_start_reg;

    input_0_address0_assign_proc : process(ap_CS_fsm_state4, grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_address0, grp_bnn_xcel_fu_367_input_0_address0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_0_address0 <= grp_bnn_xcel_fu_367_input_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_0_address0 <= grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_address0;
        else 
            input_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    input_0_ce0_assign_proc : process(ap_CS_fsm_state4, grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_ce0, grp_bnn_xcel_fu_367_input_0_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_0_ce0 <= grp_bnn_xcel_fu_367_input_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_0_ce0 <= grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_ce0;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_0_ce1_assign_proc : process(grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_ce1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_0_ce1 <= grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_ce1;
        else 
            input_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_0_we0_assign_proc : process(grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_0_we0 <= grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_we0;
        else 
            input_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input_0_we1_assign_proc : process(grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_0_we1 <= grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_input_0_we1;
        else 
            input_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    strm_in_read_assign_proc : process(grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_strm_in_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            strm_in_read <= grp_dut_Pipeline_VITIS_LOOP_26_1_fu_359_strm_in_read;
        else 
            strm_in_read <= ap_const_logic_0;
        end if; 
    end process;


    strm_out_blk_n_assign_proc : process(strm_out_full_n, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            strm_out_blk_n <= strm_out_full_n;
        else 
            strm_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    strm_out_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_bnn_xcel_fu_367_ap_return),32));

    strm_out_write_assign_proc : process(strm_out_full_n, ap_CS_fsm_state4, grp_bnn_xcel_fu_367_ap_done)
    begin
        if ((not(((grp_bnn_xcel_fu_367_ap_done = ap_const_logic_0) or (strm_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            strm_out_write <= ap_const_logic_1;
        else 
            strm_out_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
