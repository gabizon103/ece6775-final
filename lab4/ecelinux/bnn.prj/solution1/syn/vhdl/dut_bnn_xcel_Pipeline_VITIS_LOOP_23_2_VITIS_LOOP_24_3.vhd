-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_bnn_xcel_Pipeline_VITIS_LOOP_23_2_VITIS_LOOP_24_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_padded_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_padded_ce0 : OUT STD_LOGIC;
    input_padded_we0 : OUT STD_LOGIC;
    input_padded_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_padded_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_padded_1_ce0 : OUT STD_LOGIC;
    input_padded_1_we0 : OUT STD_LOGIC;
    input_padded_1_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_padded_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_padded_2_ce0 : OUT STD_LOGIC;
    input_padded_2_we0 : OUT STD_LOGIC;
    input_padded_2_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_padded_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_padded_3_ce0 : OUT STD_LOGIC;
    input_padded_3_we0 : OUT STD_LOGIC;
    input_padded_3_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_padded_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_padded_4_ce0 : OUT STD_LOGIC;
    input_padded_4_we0 : OUT STD_LOGIC;
    input_padded_4_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_padded_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_padded_5_ce0 : OUT STD_LOGIC;
    input_padded_5_we0 : OUT STD_LOGIC;
    input_padded_5_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_padded_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_padded_6_ce0 : OUT STD_LOGIC;
    input_padded_6_we0 : OUT STD_LOGIC;
    input_padded_6_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_padded_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_padded_7_ce0 : OUT STD_LOGIC;
    input_padded_7_we0 : OUT STD_LOGIC;
    input_padded_7_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_padded_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_padded_8_ce0 : OUT STD_LOGIC;
    input_padded_8_we0 : OUT STD_LOGIC;
    input_padded_8_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_padded_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_padded_9_ce0 : OUT STD_LOGIC;
    input_padded_9_we0 : OUT STD_LOGIC;
    input_padded_9_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_padded_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_padded_10_ce0 : OUT STD_LOGIC;
    input_padded_10_we0 : OUT STD_LOGIC;
    input_padded_10_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_padded_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_padded_11_ce0 : OUT STD_LOGIC;
    input_padded_11_we0 : OUT STD_LOGIC;
    input_padded_11_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_padded_12_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_padded_12_ce0 : OUT STD_LOGIC;
    input_padded_12_we0 : OUT STD_LOGIC;
    input_padded_12_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_padded_13_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_padded_13_ce0 : OUT STD_LOGIC;
    input_padded_13_we0 : OUT STD_LOGIC;
    input_padded_13_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_padded_14_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_padded_14_ce0 : OUT STD_LOGIC;
    input_padded_14_we0 : OUT STD_LOGIC;
    input_padded_14_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_padded_15_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_padded_15_ce0 : OUT STD_LOGIC;
    input_padded_15_we0 : OUT STD_LOGIC;
    input_padded_15_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of dut_bnn_xcel_Pipeline_VITIS_LOOP_23_2_VITIS_LOOP_24_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln23_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal trunc_ln23_1_fu_421_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln23_1_reg_508 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln25_fu_444_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln25_reg_517 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln25_1_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln25_fu_465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_fu_100 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_y_load : STD_LOGIC_VECTOR (4 downto 0);
    signal x_fu_104 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln23_1_fu_409_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_x_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_108 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln23_fu_373_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln24_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln23_fu_397_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv_next112_fu_385_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln23_fu_405_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_425_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln23_fu_417_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln25_1_fu_433_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dut_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component dut_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln23_fu_367_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_108 <= add_ln23_fu_373_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_108 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;

    x_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln23_fu_367_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    x_fu_104 <= select_ln23_1_fu_409_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_104 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    y_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln23_fu_367_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    y_fu_100 <= add_ln25_fu_444_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_100 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_367_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln25_reg_517 <= add_ln25_fu_444_p2;
                trunc_ln23_1_reg_508 <= trunc_ln23_1_fu_421_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln23_fu_373_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv9_1));
    add_ln25_1_fu_433_p2 <= std_logic_vector(unsigned(tmp_s_fu_425_p3) + unsigned(zext_ln23_fu_417_p1));
    add_ln25_fu_444_p2 <= std_logic_vector(unsigned(select_ln23_fu_397_p3) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln23_fu_367_p2)
    begin
        if (((icmp_ln23_fu_367_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_108)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_108;
        end if; 
    end process;


    ap_sig_allocacmp_x_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, x_fu_104)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_x_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_x_load <= x_fu_104;
        end if; 
    end process;


    ap_sig_allocacmp_y_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, y_fu_100, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_y_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_y_load <= y_fu_100;
        end if; 
    end process;

    icmp_ln23_fu_367_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv9_100) else "0";
    icmp_ln24_fu_391_p2 <= "1" when (ap_sig_allocacmp_y_load = ap_const_lv5_10) else "0";
    indvars_iv_next112_fu_385_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_x_load) + unsigned(ap_const_lv5_1));
    input_0_address0 <= zext_ln25_1_fu_439_p1(8 - 1 downto 0);

    input_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_10_address0 <= zext_ln25_fu_465_p1(5 - 1 downto 0);

    input_padded_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_10_ce0 <= ap_const_logic_1;
        else 
            input_padded_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_10_d0 <= input_0_q0;

    input_padded_10_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln23_1_reg_508, ap_block_pp0_stage0_11001)
    begin
        if (((trunc_ln23_1_reg_508 = ap_const_lv4_A) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_10_we0 <= ap_const_logic_1;
        else 
            input_padded_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_11_address0 <= zext_ln25_fu_465_p1(5 - 1 downto 0);

    input_padded_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_11_ce0 <= ap_const_logic_1;
        else 
            input_padded_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_11_d0 <= input_0_q0;

    input_padded_11_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln23_1_reg_508, ap_block_pp0_stage0_11001)
    begin
        if (((trunc_ln23_1_reg_508 = ap_const_lv4_B) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_11_we0 <= ap_const_logic_1;
        else 
            input_padded_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_12_address0 <= zext_ln25_fu_465_p1(5 - 1 downto 0);

    input_padded_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_12_ce0 <= ap_const_logic_1;
        else 
            input_padded_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_12_d0 <= input_0_q0;

    input_padded_12_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln23_1_reg_508, ap_block_pp0_stage0_11001)
    begin
        if (((trunc_ln23_1_reg_508 = ap_const_lv4_C) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_12_we0 <= ap_const_logic_1;
        else 
            input_padded_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_13_address0 <= zext_ln25_fu_465_p1(5 - 1 downto 0);

    input_padded_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_13_ce0 <= ap_const_logic_1;
        else 
            input_padded_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_13_d0 <= input_0_q0;

    input_padded_13_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln23_1_reg_508, ap_block_pp0_stage0_11001)
    begin
        if (((trunc_ln23_1_reg_508 = ap_const_lv4_D) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_13_we0 <= ap_const_logic_1;
        else 
            input_padded_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_14_address0 <= zext_ln25_fu_465_p1(5 - 1 downto 0);

    input_padded_14_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_14_ce0 <= ap_const_logic_1;
        else 
            input_padded_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_14_d0 <= input_0_q0;

    input_padded_14_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln23_1_reg_508, ap_block_pp0_stage0_11001)
    begin
        if (((trunc_ln23_1_reg_508 = ap_const_lv4_E) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_14_we0 <= ap_const_logic_1;
        else 
            input_padded_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_15_address0 <= zext_ln25_fu_465_p1(5 - 1 downto 0);

    input_padded_15_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_15_ce0 <= ap_const_logic_1;
        else 
            input_padded_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_15_d0 <= input_0_q0;

    input_padded_15_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln23_1_reg_508, ap_block_pp0_stage0_11001)
    begin
        if (((trunc_ln23_1_reg_508 = ap_const_lv4_F) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_15_we0 <= ap_const_logic_1;
        else 
            input_padded_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_1_address0 <= zext_ln25_fu_465_p1(5 - 1 downto 0);

    input_padded_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_1_ce0 <= ap_const_logic_1;
        else 
            input_padded_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_1_d0 <= input_0_q0;

    input_padded_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln23_1_reg_508, ap_block_pp0_stage0_11001)
    begin
        if (((trunc_ln23_1_reg_508 = ap_const_lv4_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_1_we0 <= ap_const_logic_1;
        else 
            input_padded_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_2_address0 <= zext_ln25_fu_465_p1(5 - 1 downto 0);

    input_padded_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_2_ce0 <= ap_const_logic_1;
        else 
            input_padded_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_2_d0 <= input_0_q0;

    input_padded_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln23_1_reg_508, ap_block_pp0_stage0_11001)
    begin
        if (((trunc_ln23_1_reg_508 = ap_const_lv4_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_2_we0 <= ap_const_logic_1;
        else 
            input_padded_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_3_address0 <= zext_ln25_fu_465_p1(5 - 1 downto 0);

    input_padded_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_3_ce0 <= ap_const_logic_1;
        else 
            input_padded_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_3_d0 <= input_0_q0;

    input_padded_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln23_1_reg_508, ap_block_pp0_stage0_11001)
    begin
        if (((trunc_ln23_1_reg_508 = ap_const_lv4_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_3_we0 <= ap_const_logic_1;
        else 
            input_padded_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_4_address0 <= zext_ln25_fu_465_p1(5 - 1 downto 0);

    input_padded_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_4_ce0 <= ap_const_logic_1;
        else 
            input_padded_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_4_d0 <= input_0_q0;

    input_padded_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln23_1_reg_508, ap_block_pp0_stage0_11001)
    begin
        if (((trunc_ln23_1_reg_508 = ap_const_lv4_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_4_we0 <= ap_const_logic_1;
        else 
            input_padded_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_5_address0 <= zext_ln25_fu_465_p1(5 - 1 downto 0);

    input_padded_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_5_ce0 <= ap_const_logic_1;
        else 
            input_padded_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_5_d0 <= input_0_q0;

    input_padded_5_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln23_1_reg_508, ap_block_pp0_stage0_11001)
    begin
        if (((trunc_ln23_1_reg_508 = ap_const_lv4_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_5_we0 <= ap_const_logic_1;
        else 
            input_padded_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_6_address0 <= zext_ln25_fu_465_p1(5 - 1 downto 0);

    input_padded_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_6_ce0 <= ap_const_logic_1;
        else 
            input_padded_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_6_d0 <= input_0_q0;

    input_padded_6_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln23_1_reg_508, ap_block_pp0_stage0_11001)
    begin
        if (((trunc_ln23_1_reg_508 = ap_const_lv4_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_6_we0 <= ap_const_logic_1;
        else 
            input_padded_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_7_address0 <= zext_ln25_fu_465_p1(5 - 1 downto 0);

    input_padded_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_7_ce0 <= ap_const_logic_1;
        else 
            input_padded_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_7_d0 <= input_0_q0;

    input_padded_7_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln23_1_reg_508, ap_block_pp0_stage0_11001)
    begin
        if (((trunc_ln23_1_reg_508 = ap_const_lv4_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_7_we0 <= ap_const_logic_1;
        else 
            input_padded_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_8_address0 <= zext_ln25_fu_465_p1(5 - 1 downto 0);

    input_padded_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_8_ce0 <= ap_const_logic_1;
        else 
            input_padded_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_8_d0 <= input_0_q0;

    input_padded_8_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln23_1_reg_508, ap_block_pp0_stage0_11001)
    begin
        if (((trunc_ln23_1_reg_508 = ap_const_lv4_8) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_8_we0 <= ap_const_logic_1;
        else 
            input_padded_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_9_address0 <= zext_ln25_fu_465_p1(5 - 1 downto 0);

    input_padded_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_9_ce0 <= ap_const_logic_1;
        else 
            input_padded_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_9_d0 <= input_0_q0;

    input_padded_9_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln23_1_reg_508, ap_block_pp0_stage0_11001)
    begin
        if (((trunc_ln23_1_reg_508 = ap_const_lv4_9) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_9_we0 <= ap_const_logic_1;
        else 
            input_padded_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_address0 <= zext_ln25_fu_465_p1(5 - 1 downto 0);

    input_padded_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_ce0 <= ap_const_logic_1;
        else 
            input_padded_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_padded_d0 <= input_0_q0;

    input_padded_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln23_1_reg_508, ap_block_pp0_stage0_11001)
    begin
        if (((trunc_ln23_1_reg_508 = ap_const_lv4_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_padded_we0 <= ap_const_logic_1;
        else 
            input_padded_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln23_1_fu_409_p3 <= 
        indvars_iv_next112_fu_385_p2 when (icmp_ln24_fu_391_p2(0) = '1') else 
        ap_sig_allocacmp_x_load;
    select_ln23_fu_397_p3 <= 
        ap_const_lv5_0 when (icmp_ln24_fu_391_p2(0) = '1') else 
        ap_sig_allocacmp_y_load;
    tmp_s_fu_425_p3 <= (trunc_ln23_fu_405_p1 & ap_const_lv4_0);
    trunc_ln23_1_fu_421_p1 <= select_ln23_1_fu_409_p3(4 - 1 downto 0);
    trunc_ln23_fu_405_p1 <= select_ln23_fu_397_p3(4 - 1 downto 0);
    zext_ln23_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln23_1_fu_409_p3),8));
    zext_ln25_1_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln25_1_fu_433_p2),64));
    zext_ln25_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln25_reg_517),64));
end behav;
