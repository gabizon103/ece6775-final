-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Tool Version Limit: 2022.04
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dut_dense_256_10_s_w_fc2_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 256; 
             AddressWidth     : integer := 4; 
             AddressRange    : integer := 10
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dut_dense_256_10_s_w_fc2_ROM_AUTO_1R is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem : mem_array := (
    0 => "0111010101010001111010011010111000110110000101101010110111010100010000000111100110010001100011010111001000100011100100000010000000101101010010001010111011011001000101001111101011101100101100100011001101100100001101101100000001110101011101010011100011000010", 
    1 => "1010111101000010010011000011011100010011111001111110001111111101011001011100001100001110100001011101011010110010001111011100101011110100111110001011010000001000111011111001011010110100001100001010101010110011100011111110111010000111000011101101011010110100", 
    2 => "1010000110011010001000011101110010010011100101000000110001011000110010001100111010111110001101011101010110101110001110011011110001011010011010010100100000101100000111001111000101110000010010101111010101101011001111100000010101011111011101111001011010100001", 
    3 => "0101010011011111111101011100110111100111000100011110110011100001111101010110011010001111001101110011011001100100111110111001111011000001001001100000110111011111111111101011011000110000010111001111111101010000100010001000110010001010100111010011001011101001", 
    4 => "0011101000100100100110010011101000100011110010000010001110010011001110110001010100010000101000001010111110010100110101111000111110011001011110001111110010100010111100000111111000001011110000111100110110010001000110100110100110110010000000111000010100000000", 
    5 => "0101101101011101010111001110111101101110010111011110101101011101111111010100001000000110011111000011100101110101010010100010011110000101101001101110000010111101111000000100001000111111010111101001111000101000111000001010110011110111000111010111010011001001", 
    6 => "0011101001101000011100111011010110000111111001100101001101110101011011110110011100001000101110000110000101000110010000001111010111110010011100100101011001100111101001100101111100000111000010101101011101100111001100101111001001110101010000100000011111000011", 
    7 => "1011000110100011000011001100110111100000101110011001101011101101110010111111100000001111100000001011001010110000001110111100111010000010001001111010111010110010011110000000111011011000111100110010000001010010101010110000110011010110000111110010100001000010", 
    8 => "1010101011010101010110011110101101001110110110101000010111110010111011100011100110110101101100000011011101100100111111010111101101001001000001001101111010001101011101111010001001110001000111001000001001100011110010010110111011111111110000010110101101100101", 
    9 => "0111111000000111100011011111111101110101001111010011101111111011100110000101110001000000101000101110101110100000011101011100111110001001000101111110100010110010100101010110110111001010111011011001101101010001101000100010110110110110100101110010110100010100" );


begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(address0_tmp)); 
        end if;
    end if;
end process;

end rtl;

