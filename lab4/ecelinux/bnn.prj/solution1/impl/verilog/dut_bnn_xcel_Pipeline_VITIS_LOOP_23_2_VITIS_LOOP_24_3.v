// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_bnn_xcel_Pipeline_VITIS_LOOP_23_2_VITIS_LOOP_24_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        input_padded_address0,
        input_padded_ce0,
        input_padded_we0,
        input_padded_d0,
        input_padded_1_address0,
        input_padded_1_ce0,
        input_padded_1_we0,
        input_padded_1_d0,
        input_padded_2_address0,
        input_padded_2_ce0,
        input_padded_2_we0,
        input_padded_2_d0,
        input_padded_3_address0,
        input_padded_3_ce0,
        input_padded_3_we0,
        input_padded_3_d0,
        input_padded_4_address0,
        input_padded_4_ce0,
        input_padded_4_we0,
        input_padded_4_d0,
        input_padded_5_address0,
        input_padded_5_ce0,
        input_padded_5_we0,
        input_padded_5_d0,
        input_padded_6_address0,
        input_padded_6_ce0,
        input_padded_6_we0,
        input_padded_6_d0,
        input_padded_7_address0,
        input_padded_7_ce0,
        input_padded_7_we0,
        input_padded_7_d0,
        input_padded_8_address0,
        input_padded_8_ce0,
        input_padded_8_we0,
        input_padded_8_d0,
        input_padded_9_address0,
        input_padded_9_ce0,
        input_padded_9_we0,
        input_padded_9_d0,
        input_padded_10_address0,
        input_padded_10_ce0,
        input_padded_10_we0,
        input_padded_10_d0,
        input_padded_11_address0,
        input_padded_11_ce0,
        input_padded_11_we0,
        input_padded_11_d0,
        input_padded_12_address0,
        input_padded_12_ce0,
        input_padded_12_we0,
        input_padded_12_d0,
        input_padded_13_address0,
        input_padded_13_ce0,
        input_padded_13_we0,
        input_padded_13_d0,
        input_padded_14_address0,
        input_padded_14_ce0,
        input_padded_14_we0,
        input_padded_14_d0,
        input_padded_15_address0,
        input_padded_15_ce0,
        input_padded_15_we0,
        input_padded_15_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] input_0_address0;
output   input_0_ce0;
input  [0:0] input_0_q0;
output  [4:0] input_padded_address0;
output   input_padded_ce0;
output   input_padded_we0;
output  [0:0] input_padded_d0;
output  [4:0] input_padded_1_address0;
output   input_padded_1_ce0;
output   input_padded_1_we0;
output  [0:0] input_padded_1_d0;
output  [4:0] input_padded_2_address0;
output   input_padded_2_ce0;
output   input_padded_2_we0;
output  [0:0] input_padded_2_d0;
output  [4:0] input_padded_3_address0;
output   input_padded_3_ce0;
output   input_padded_3_we0;
output  [0:0] input_padded_3_d0;
output  [4:0] input_padded_4_address0;
output   input_padded_4_ce0;
output   input_padded_4_we0;
output  [0:0] input_padded_4_d0;
output  [4:0] input_padded_5_address0;
output   input_padded_5_ce0;
output   input_padded_5_we0;
output  [0:0] input_padded_5_d0;
output  [4:0] input_padded_6_address0;
output   input_padded_6_ce0;
output   input_padded_6_we0;
output  [0:0] input_padded_6_d0;
output  [4:0] input_padded_7_address0;
output   input_padded_7_ce0;
output   input_padded_7_we0;
output  [0:0] input_padded_7_d0;
output  [4:0] input_padded_8_address0;
output   input_padded_8_ce0;
output   input_padded_8_we0;
output  [0:0] input_padded_8_d0;
output  [4:0] input_padded_9_address0;
output   input_padded_9_ce0;
output   input_padded_9_we0;
output  [0:0] input_padded_9_d0;
output  [4:0] input_padded_10_address0;
output   input_padded_10_ce0;
output   input_padded_10_we0;
output  [0:0] input_padded_10_d0;
output  [4:0] input_padded_11_address0;
output   input_padded_11_ce0;
output   input_padded_11_we0;
output  [0:0] input_padded_11_d0;
output  [4:0] input_padded_12_address0;
output   input_padded_12_ce0;
output   input_padded_12_we0;
output  [0:0] input_padded_12_d0;
output  [4:0] input_padded_13_address0;
output   input_padded_13_ce0;
output   input_padded_13_we0;
output  [0:0] input_padded_13_d0;
output  [4:0] input_padded_14_address0;
output   input_padded_14_ce0;
output   input_padded_14_we0;
output  [0:0] input_padded_14_d0;
output  [4:0] input_padded_15_address0;
output   input_padded_15_ce0;
output   input_padded_15_we0;
output  [0:0] input_padded_15_d0;

reg ap_idle;
reg input_0_ce0;
reg input_padded_ce0;
reg input_padded_we0;
reg input_padded_1_ce0;
reg input_padded_1_we0;
reg input_padded_2_ce0;
reg input_padded_2_we0;
reg input_padded_3_ce0;
reg input_padded_3_we0;
reg input_padded_4_ce0;
reg input_padded_4_we0;
reg input_padded_5_ce0;
reg input_padded_5_we0;
reg input_padded_6_ce0;
reg input_padded_6_we0;
reg input_padded_7_ce0;
reg input_padded_7_we0;
reg input_padded_8_ce0;
reg input_padded_8_we0;
reg input_padded_9_ce0;
reg input_padded_9_we0;
reg input_padded_10_ce0;
reg input_padded_10_we0;
reg input_padded_11_ce0;
reg input_padded_11_we0;
reg input_padded_12_ce0;
reg input_padded_12_we0;
reg input_padded_13_ce0;
reg input_padded_13_we0;
reg input_padded_14_ce0;
reg input_padded_14_we0;
reg input_padded_15_ce0;
reg input_padded_15_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln23_fu_367_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] trunc_ln23_1_fu_421_p1;
reg   [3:0] trunc_ln23_1_reg_508;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] add_ln25_fu_444_p2;
reg   [4:0] add_ln25_reg_517;
wire   [63:0] zext_ln25_1_fu_439_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln25_fu_465_p1;
reg   [4:0] y_fu_100;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_y_load;
reg   [4:0] x_fu_104;
wire   [4:0] select_ln23_1_fu_409_p3;
reg   [4:0] ap_sig_allocacmp_x_load;
reg   [8:0] indvar_flatten_fu_108;
wire   [8:0] add_ln23_fu_373_p2;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln24_fu_391_p2;
wire   [4:0] select_ln23_fu_397_p3;
wire   [4:0] indvars_iv_next112_fu_385_p2;
wire   [3:0] trunc_ln23_fu_405_p1;
wire   [7:0] tmp_s_fu_425_p3;
wire   [7:0] zext_ln23_fu_417_p1;
wire   [7:0] add_ln25_1_fu_433_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

dut_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln23_fu_367_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_108 <= add_ln23_fu_373_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_108 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln23_fu_367_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            x_fu_104 <= select_ln23_1_fu_409_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            x_fu_104 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln23_fu_367_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            y_fu_100 <= add_ln25_fu_444_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            y_fu_100 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_367_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln25_reg_517 <= add_ln25_fu_444_p2;
        trunc_ln23_1_reg_508 <= trunc_ln23_1_fu_421_p1;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_367_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_108;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_x_load = 5'd0;
    end else begin
        ap_sig_allocacmp_x_load = x_fu_104;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_y_load = 5'd0;
    end else begin
        ap_sig_allocacmp_y_load = y_fu_100;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_10_ce0 = 1'b1;
    end else begin
        input_padded_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln23_1_reg_508 == 4'd10) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_10_we0 = 1'b1;
    end else begin
        input_padded_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_11_ce0 = 1'b1;
    end else begin
        input_padded_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln23_1_reg_508 == 4'd11) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_11_we0 = 1'b1;
    end else begin
        input_padded_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_12_ce0 = 1'b1;
    end else begin
        input_padded_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln23_1_reg_508 == 4'd12) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_12_we0 = 1'b1;
    end else begin
        input_padded_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_13_ce0 = 1'b1;
    end else begin
        input_padded_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln23_1_reg_508 == 4'd13) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_13_we0 = 1'b1;
    end else begin
        input_padded_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_14_ce0 = 1'b1;
    end else begin
        input_padded_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln23_1_reg_508 == 4'd14) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_14_we0 = 1'b1;
    end else begin
        input_padded_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_15_ce0 = 1'b1;
    end else begin
        input_padded_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln23_1_reg_508 == 4'd15) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_15_we0 = 1'b1;
    end else begin
        input_padded_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_1_ce0 = 1'b1;
    end else begin
        input_padded_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln23_1_reg_508 == 4'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_1_we0 = 1'b1;
    end else begin
        input_padded_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_2_ce0 = 1'b1;
    end else begin
        input_padded_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln23_1_reg_508 == 4'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_2_we0 = 1'b1;
    end else begin
        input_padded_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_3_ce0 = 1'b1;
    end else begin
        input_padded_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln23_1_reg_508 == 4'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_3_we0 = 1'b1;
    end else begin
        input_padded_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_4_ce0 = 1'b1;
    end else begin
        input_padded_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln23_1_reg_508 == 4'd4) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_4_we0 = 1'b1;
    end else begin
        input_padded_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_5_ce0 = 1'b1;
    end else begin
        input_padded_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln23_1_reg_508 == 4'd5) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_5_we0 = 1'b1;
    end else begin
        input_padded_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_6_ce0 = 1'b1;
    end else begin
        input_padded_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln23_1_reg_508 == 4'd6) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_6_we0 = 1'b1;
    end else begin
        input_padded_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_7_ce0 = 1'b1;
    end else begin
        input_padded_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln23_1_reg_508 == 4'd7) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_7_we0 = 1'b1;
    end else begin
        input_padded_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_8_ce0 = 1'b1;
    end else begin
        input_padded_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln23_1_reg_508 == 4'd8) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_8_we0 = 1'b1;
    end else begin
        input_padded_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_9_ce0 = 1'b1;
    end else begin
        input_padded_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln23_1_reg_508 == 4'd9) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_9_we0 = 1'b1;
    end else begin
        input_padded_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_ce0 = 1'b1;
    end else begin
        input_padded_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln23_1_reg_508 == 4'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_padded_we0 = 1'b1;
    end else begin
        input_padded_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_fu_373_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln25_1_fu_433_p2 = (tmp_s_fu_425_p3 + zext_ln23_fu_417_p1);

assign add_ln25_fu_444_p2 = (select_ln23_fu_397_p3 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln23_fu_367_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_391_p2 = ((ap_sig_allocacmp_y_load == 5'd16) ? 1'b1 : 1'b0);

assign indvars_iv_next112_fu_385_p2 = (ap_sig_allocacmp_x_load + 5'd1);

assign input_0_address0 = zext_ln25_1_fu_439_p1;

assign input_padded_10_address0 = zext_ln25_fu_465_p1;

assign input_padded_10_d0 = input_0_q0;

assign input_padded_11_address0 = zext_ln25_fu_465_p1;

assign input_padded_11_d0 = input_0_q0;

assign input_padded_12_address0 = zext_ln25_fu_465_p1;

assign input_padded_12_d0 = input_0_q0;

assign input_padded_13_address0 = zext_ln25_fu_465_p1;

assign input_padded_13_d0 = input_0_q0;

assign input_padded_14_address0 = zext_ln25_fu_465_p1;

assign input_padded_14_d0 = input_0_q0;

assign input_padded_15_address0 = zext_ln25_fu_465_p1;

assign input_padded_15_d0 = input_0_q0;

assign input_padded_1_address0 = zext_ln25_fu_465_p1;

assign input_padded_1_d0 = input_0_q0;

assign input_padded_2_address0 = zext_ln25_fu_465_p1;

assign input_padded_2_d0 = input_0_q0;

assign input_padded_3_address0 = zext_ln25_fu_465_p1;

assign input_padded_3_d0 = input_0_q0;

assign input_padded_4_address0 = zext_ln25_fu_465_p1;

assign input_padded_4_d0 = input_0_q0;

assign input_padded_5_address0 = zext_ln25_fu_465_p1;

assign input_padded_5_d0 = input_0_q0;

assign input_padded_6_address0 = zext_ln25_fu_465_p1;

assign input_padded_6_d0 = input_0_q0;

assign input_padded_7_address0 = zext_ln25_fu_465_p1;

assign input_padded_7_d0 = input_0_q0;

assign input_padded_8_address0 = zext_ln25_fu_465_p1;

assign input_padded_8_d0 = input_0_q0;

assign input_padded_9_address0 = zext_ln25_fu_465_p1;

assign input_padded_9_d0 = input_0_q0;

assign input_padded_address0 = zext_ln25_fu_465_p1;

assign input_padded_d0 = input_0_q0;

assign select_ln23_1_fu_409_p3 = ((icmp_ln24_fu_391_p2[0:0] == 1'b1) ? indvars_iv_next112_fu_385_p2 : ap_sig_allocacmp_x_load);

assign select_ln23_fu_397_p3 = ((icmp_ln24_fu_391_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_y_load);

assign tmp_s_fu_425_p3 = {{trunc_ln23_fu_405_p1}, {4'd0}};

assign trunc_ln23_1_fu_421_p1 = select_ln23_1_fu_409_p3[3:0];

assign trunc_ln23_fu_405_p1 = select_ln23_fu_397_p3[3:0];

assign zext_ln23_fu_417_p1 = select_ln23_1_fu_409_p3;

assign zext_ln25_1_fu_439_p1 = add_ln25_1_fu_433_p2;

assign zext_ln25_fu_465_p1 = add_ln25_reg_517;

endmodule //dut_bnn_xcel_Pipeline_VITIS_LOOP_23_2_VITIS_LOOP_24_3
